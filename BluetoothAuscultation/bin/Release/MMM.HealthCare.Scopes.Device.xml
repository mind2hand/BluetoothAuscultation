<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MMM.HealthCare.Scopes.Device</name>
    </assembly>
    <members>
        <member name="T:MMM.HealthCare.Scopes.Device.AuthorizerValidator">
            <summary>
              Confirms the license file.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.AuthorizerValidator.GenerateHash(System.String)">
            <summary>
              Generates the hash.
            </summary>
            <param name = "companyName">The company.</param>
            <returns>The generated hash.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.AuthorizerValidator.IsAuthorized(System.String,System.String)">
            <summary>
              Determines whether the specified company is authorized to use the assembly.
            </summary>
            <param name = "companyName">The company name.</param>
            <param name = "hash">The previously generated hash.</param>
            <returns>
              <c>true</c> if the specified hash is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.AuthorizerValidator.IsAuthorized(System.String)">
            <summary>
              Determines whether company is authorized to use the assembly using the XML file.
            </summary>
            <param name = "xmlFilePath">The XML file path.</param>
            <returns>
              <c>true</c> if the company is authorized to use the assembly; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.AuthorizerValidator.GetFirstElementInnerText(System.Xml.XmlDocument,System.String)">
            <summary>
              Gets the first element inner text.
            </summary>
            <param name = "xmlDocument">The XML document.</param>
            <param name = "elementName">The XML element name.</param>
            <returns>The inner text.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.AuthorizerValidator.CreateSalt">
            <summary>
              Creates the salt.
            </summary>
            <returns>The salt.</returns>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothDevice">
            <summary>
            Manages the connection to a bluetooth device using 32 feet.net.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.IBluetoothDevice">
            <summary>
            Manages the connection to the Bluetooth device.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.IBluetoothDevice.Connect">
            <summary>
            Connects to the Bluetooth device.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.IBluetoothDevice.Disconnect">
            <summary>
            Disconnects from the Bluetooth device.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.IBluetoothDevice.Name">
            <summary>
            The name of the Bluetooth device.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.IBluetoothDevice.SerialNumber">
            <summary>
            The stethoscope serial number.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.IBluetoothDevice.MacAddress">
            <summary>
            Gets the stethoscope Bluetooth MAC address.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.IBluetoothDevice.IsConnected">
            <summary>
            Gets a value indicating whether the Bluetooth device is connected.
            </summary>
            <value>
            	<c>true</c> if the Bluetooth device is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.IBluetoothDevice.Stream">
            <summary>
            Gets the stream to and from the Bluetooth device.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothDevice.#ctor(InTheHand.Net.Sockets.BluetoothDeviceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothDevice"/> class.
            </summary>
            <param name="bluetoothDeviceInfo">The 32 feet.net bluetooth device.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothDevice.Connect">
            <summary>
            Connects to the Bluetooth device.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.BluetoothException">Throws a Bluetooth exception if the current Bluetooth radio is not supported.  
            Also throws a Bluetooth exception if the radio is not plugged in or turned on.  Throws a Bluetooth exception if the
            connection timeout expires (5 seconds).  Throws a Bluetooth exception if the connection failed.</exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothDevice.ConnectCallback(System.IAsyncResult)">
            <summary>
            Callback that occurs when a Bluetooth connection is successful or the Bluetooth socket is closed.
            </summary>
            <param name="asnycResult">AsyncResult returned from the BeginConnect method.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothDevice.Disconnect">
            <summary>
            Disconnects from the Bluetooth device.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.BluetoothException">Throws a Bluetooth exception if the current Bluetooth radio is not supported.  
            Also throws a Bluetooth exception if the radio is not plugged in or turned on.</exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothDevice.Dispose">
            <summary>
            Disposes of the Bluetooth Manager class.  
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothDevice.Name">
            <summary>
            The name of the Bluetooth device.
            </summary>
            <value></value>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothDevice.SerialNumber">
            <summary>
            The Serial Number for this device.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothDevice.MacAddress">
            <summary>
            Gets the Bluetooth device MAC address.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothDevice.IsConnected">
            <summary>
            If the device is connected or not.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothDevice.Stream">
            <summary>
            The stream of data from the device.  This is only valid after the devices has been connected.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.ButtonEventArgs">
            <summary>
              The event arguments for the stethoscope button events.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ButtonEventArgs.#ctor(System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:MMM.HealthCare.Scopes.Device.ButtonEventArgs"/> class.
            </summary>
            <param name="isLongButtonClick">If set to <c>true</c> the button click is long.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.ButtonEventArgs.IsLongButtonClick">
            <summary>
              Gets a value indicating whether the button click is long.
            </summary>
            <value>
              <c>true</c> if the button click is long; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.OutOfRangeEventArgs">
            <summary>
              Event argument passed when the stethoscope goes out of range or goes back into range.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.OutOfRangeEventArgs.#ctor(System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:MMM.HealthCare.Scopes.Device.OutOfRangeEventArgs"/> class.
            </summary>
            <param name="isOutOfRange">
              <c>true</c> if the stethoscope has gone out of range.
              <c>false</c> if the stethoscope has come back into range.
            </param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.OutOfRangeEventArgs.IsOutOfRange">
            <summary>
              Gets a value indicating whether the stethoscope is out of range.
            </summary>
            <value>
              <c>true</c> if the stethoscope has gone out of range; <c>false</c> if the stethoscope has come back into
              range.
            </value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.UnderrunOrOverrunEventArgs">
            <summary>
              Event argument passed when an underrun or overrun error occurs.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.UnderrunOrOverrunEventArgs.#ctor(System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:MMM.HealthCare.Scopes.Device.UnderrunOrOverrunEventArgs"/> class.
            </summary>
            <param name="isUnderrun">
              <c>true</c> if underrun; otherwise <c>false</c> if overrun.
            </param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.UnderrunOrOverrunEventArgs.IsUnderrun">
            <summary>
            Gets a value indicating whether stethoscope is underrun or overrun.
            </summary>
            <value>
            	<c>true</c> if stethoscope is underrun; otherwise, <c>false</c> stethoscope the stethoscope is overrun.
            </value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.E3kAudioStreamRecordType">
            <summary>
              A command received from the stethoscope with the audio stream packet data.
            </summary>
            <remarks>
              Is a E3k_AUDIO_STREAM_RECORD_TYPE record in the Bluetooth SPP Protocol  Record Specification document.
            </remarks>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.IReceiveCommand">
            <summary>
            Deserializes commands from the stethoscope.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.IReceiveCommand.DeserializePayload(MMM.HealthCare.Scopes.Device.Stethoscope,System.Byte[])">
            <summary>
            Deserializes a packet byte payload from the stethoscope.
            </summary>
            <param name="stethoscope">The stethoscope to deserilize for.</param>
            <param name="payload">The packet byte payload.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.IReceiveCommand.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.E3kAudioStreamRecordType.DeserializePayload(MMM.HealthCare.Scopes.Device.Stethoscope,System.Byte[])">
            <summary>
              Deserializes a packet byte payload from the stethoscope.
            </summary>
            <param name = "stethoscope">The stethoscope to deserialize for.</param>
            <param name = "payload">The packet byte payload.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kAudioStreamRecordType.CommandByte">
            <summary>
              Gets the packet command byte.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.E3kButtonReleaseEventRecordType">
            <summary>
              A command that is received when a held button on the stethoscope is released.
            </summary>
            <remarks>
              For firmware 3.0
            
              Is an E3K_BUTTON_RELEASE_EVENT_RECORD_TYPE in the Bluetooth SPP Protocol Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.E3kButtonReleaseEventRecordType.DeserializePayload(MMM.HealthCare.Scopes.Device.Stethoscope,System.Byte[])">
            <summary>
              Deserializes a packet byte payload from the stethoscope.
            </summary>
            <param name = "stethoscope">The stethoscope to deserilize for.</param>
            <param name = "payload">The packet byte payload.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.E3kButtonReleaseEventRecordType.DeserializeButtons(MMM.HealthCare.Scopes.Device.Stethoscope,System.Byte[])">
            <summary>
              Deserializes the button bytes to determine what button was pressed, and to raise
              that button press event on the stethoscope.
            </summary>
            <param name = "stethoscope">The stethoscope object.</param>
            <param name = "buttonBytes">The button bytes on the payload.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kButtonReleaseEventRecordType.CommandByte">
            <summary>
              Gets the packet command byte.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.E3kReplyAudioSettingRecordType">
            <summary>
              A command received from stethoscope audio settings
            </summary>
            <remarks>
              This class corresponds to the E3K_REPLY_AUDIO_SETTING_RECORD_TYPE record in Bluetooth SPP Protocol Record
              Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.E3kReplyAudioSettingRecordType.DeserializePayload(MMM.HealthCare.Scopes.Device.Stethoscope,System.Byte[])">
            <summary>
              Deserializes a packet byte payload from the stethoscope.
            </summary>
            <param name = "stethoscope">The stethoscope to deserialize for.</param>
            <param name = "payload">The packet byte payload.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kReplyAudioSettingRecordType.CommandByte">
            <summary>
              Gets the packet command byte.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.E3kReplyPanicRecordType">
            <summary>
              Panic record type returned from the stethoscope when a PC sends a PC_REQUEST_PANIC_RECORD_TYPE.
            </summary>
            <remarks>
              Is a E3K_REPLY_PANIC_RECORD_TYPE record in the Bluetooth SPP Protocol 
              Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.E3kReplyPanicRecordType.DeserializePayload(MMM.HealthCare.Scopes.Device.Stethoscope,System.Byte[])">
            <summary>
              Deserializes a packet byte payload from the stethoscope.
            </summary>
            <param name = "stethoscope">The stethoscope to deserialize for.</param>
            <param name = "payload">The packet byte payload.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kReplyPanicRecordType.Counter">
            <summary>
              Gets the counter.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kReplyPanicRecordType.ModuleName">
            <summary>
              Gets the name of the module.
            </summary>
            <value>
              The name of the module.
            </value>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kReplyPanicRecordType.LineNumber">
            <summary>
              Gets the line number.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kReplyPanicRecordType.CommandByte">
            <summary>
              Gets the packet command byte.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.E3kReplyTrackLengthRecordType">
            <summary>
              Reply record that is returned from the stethoscope when a 
              <see cref="T:MMM.HealthCare.Scopes.Device.PcRequestTrackLengthRecordType"/> is sent to the stethoscope.
            </summary>
            <remarks>
              Is a E3K_REPLY_TRACK_LENGTH_RECORD_TYPE record in the Bluetooth SPP Protocol Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.E3kReplyTrackLengthRecordType.DeserializePayload(MMM.HealthCare.Scopes.Device.Stethoscope,System.Byte[])">
            <summary>
              Deserializes a packet byte payload from the stethoscope.
            </summary>
            <param name = "stethoscope">The stethoscope to deserialize for.</param>
            <param name = "payload">The packet byte payload.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.E3kReplyTrackLengthRecordType.getStethoscopeTrack(MMM.HealthCare.Scopes.Device.Stethoscope,System.Int32)">
            <summary>
              Get the stethoscope track object for this index.
            </summary>
            <param name = "stethoscope">The scope to search for tracks on.</param>
            <param name = "index">The track index to look for.</param>
            <returns>The stethoscope track found or null if no track is found.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kReplyTrackLengthRecordType.CommandByte">
            <summary>
              Gets the packet command byte.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.E3kReplyTrackStatusRecordType">
            <summary>
              Reply record that is returned from the stethoscope when a 
              <see cref="T:MMM.HealthCare.Scopes.Device.PcRequestTrackStatusRecordType"/> is sent to the stethoscope.
            
              Is a E3K_REPLY_TRACK_STATUS_RECORD_TYPE record in the Bluetooth SPP Protocol Record
              Specification document.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.E3kReplyTrackStatusRecordType.DeserializePayload(MMM.HealthCare.Scopes.Device.Stethoscope,System.Byte[])">
            <summary>
              Deserializes a packet byte payload to the stethoscope.
            </summary>
            <param name = "stethoscope">The stethoscope to deserialize for.</param>
            <param name = "payload">The packet byte payload.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kReplyTrackStatusRecordType.CommandByte">
            <summary>
              Gets the packet command byte.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcAudioStreamCloseRecordType">
            <summary>
            Command type that is sent from the PC to the scope to tell the scope we are
            done sending audio.
            
            Is a PC_AUDIO_STREAM_CLOSE_RECORD_TYPE record in the Bluetooth SPP Protocol Record Specification document.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.BaseSendCommand">
            <summary>
            Implements common properties in the <see cref="T:MMM.HealthCare.Scopes.Device.ISendCommand"/> interface.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.ISendCommand">
            <summary>
            A command sent to the stethoscope.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ISendCommand.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.ISendCommand.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.ISendCommand.AttemptsToSend">
            <summary>
            Gets or sets the number of attempts to send this command.
            </summary>
            <value>The attempts to send.</value>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.ISendCommand.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The response commands types.</value>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.BaseSendCommand.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.BaseSendCommand.AttemptsToSend">
            <summary>
            Gets or sets the attempts to send.
            </summary>
            <value>The attempts to send.</value>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.BaseSendCommand.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.BaseSendCommand.ResponseCommands">
            <summary>
            Gets the response commands types.
            </summary>
            <value>The response commands types.</value>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcAudioStreamCloseRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
             Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcAudioStreamCloseRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcAudioStreamCloseRecordType.ResponseCommands">
            <summary>
             Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcAudioStreamRecordType">
            <summary>
            Send PCM 16 bit audio to the stethoscope.
            </summary>
            <remarks>
            Is a PC_AUDIO_STREAM_RECORD_TYPE record in the Bluetooth SPP Protocol 
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcAudioStreamRecordType.#ctor(System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="payload">
            The audio payload you want the scope to play.  
            Must be in 64 byte chunks of data.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcAudioStreamRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcAudioStreamRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcAudioStreamRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.E3KReplyTimeoutSettingsRecordType">
            <summary>
              A command received from stethoscope with timeout settings.
            </summary>
            <remarks>
              Is a E3K_REPLY_TIMEOUT_SETTINGS_RECORD_TYPE record in the Bluetooth SPP Protocol Record Specification
              document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.E3KReplyTimeoutSettingsRecordType.DeserializePayload(MMM.HealthCare.Scopes.Device.Stethoscope,System.Byte[])">
            <summary>
              Deserializes a packet byte payload from the stethoscope.
            </summary>
            <param name = "stethoscope">The stethoscope to deserialize to.</param>
            <param name = "payload">The packet byte payload.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3KReplyTimeoutSettingsRecordType.CommandByte">
            <summary>
              Gets the packet command byte.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcDisconnectBluetoothRecordType">
            <summary>
            Command type sent from the PC to the stethoscope to disconnect the stethoscope.
            </summary>
            <remarks>
            Is a PC_DISCONNECT_BLUETOOTH_RECORD_TYPE record in the Bluetooth SPP Protocol 
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcDisconnectBluetoothRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcDisconnectBluetoothRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcDisconnectBluetoothRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcRequestAudioSettingRecordType">
            <summary>
            Command type to request the current audio settings of the stethoscope.  Settings include
            Current Volume, Current Filter, Start up volume, Start up filter, current gain step,
            Start up gain step, fine gain.
            </summary>
            <remarks>
            Is a PC_REQUEST_AUDIO_SETTING_RECORD_TYPE record in the Bluetooth SPP Protocol 
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcRequestAudioSettingRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcRequestAudioSettingRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcRequestAudioSettingRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcRequestPanicRecordType">
            <summary>
            A command sent to stethoscope to request a response e3k panic record type.
            </summary>
            <remarks>
            Is a PC_REQUEST_PANIC_RECORD_TYPE record in the Bluetooth SPP Protocol
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcRequestPanicRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcRequestPanicRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcRequestPanicRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcRequestTimeoutSettingsRecordType">
            <summary>
            A command sent to the stethoscope requesting the timeout settings.
            </summary>
            <remarks>
            Is a PC_REQUEST_TIMEOUT_SETTINGS_RECORD_TYPE record in the Bluetooth SPP Protocol 
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcRequestTimeoutSettingsRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcRequestTimeoutSettingsRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcRequestTimeoutSettingsRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcRequestTrackLengthRecordType">
            <summary>
            A command sent to the stethoscope to get the track length for all tracks.
            
            Is a PC_REQUEST_TRACK_LENGTH_RECORD_TYPE record in the Bluetooth SPP Protocol
            Record Specification document.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcRequestTrackLengthRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcRequestTrackLengthRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcRequestTrackLengthRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcRequestTrackStatusRecordType">
            <summary>
            A command sent to the stethoscope to get the track status for all tracks.
             
            Is a PC_REQUEST_TRACK_STATUS_RECORD_TYPE record in the Bluetooth SPP Protocol
            Record Specification document.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcRequestTrackStatusRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcRequestTrackStatusRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcRequestTrackStatusRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that responds to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcSetAudioRecordType">
            <summary>
            A command sent to stethoscope to set the amplification level and filter.
            </summary>
            <remarks>
            Is a PC_SET_AUDIO_RECORD_TYPE record in the Bluetooth SPP Protocol
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetAudioRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetAudioRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetAudioRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.E3kAudioBlockRequestRecordType">
            <summary>
              A command sent to the computer which requests more audio packets.
            </summary>
            <remarks>
              Is a E3K_AUDIO_BLOCK_REQUEST_RECORD_TYPE record in the Bluetooth SPP Protocol 
              Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.E3kAudioBlockRequestRecordType.DeserializePayload(MMM.HealthCare.Scopes.Device.Stethoscope,System.Byte[])">
            <summary>
              Deserializes a packet byte payload from the stethoscope.
            </summary>
            <param name = "stethoscope">The stethoscope to deserialize for.</param>
            <param name = "payload">The packet byte payload.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kAudioBlockRequestRecordType.CommandByte">
            <summary>
              Gets the packet command byte.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcSetBufferControlRecordType">
            <summary>
            Record type sent from the PC to the scope to control the audio stream buffer size.
            </summary>
            <remarks>
            Is a PC_SET_BUFFER_CONTROL_RECORD_TYPE record in the Bluetooth SPP Protocol 
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetBufferControlRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetBufferControlRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetBufferControlRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcSetCurrentTimeoutRecordType">
            <summary>
            A command sent to stethoscope to set the device's timeout.
            </summary>
            <remarks>
            Is a PC_SET_CURRENT_TIMEOUT_RECORD_TYPE record in the Bluetooth SPP Protocol
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetCurrentTimeoutRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetCurrentTimeoutRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetCurrentTimeoutRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcSetDeleteTrackRecordType">
            <summary>
            A command sent to stethoscope to delete a recorded track.
            </summary>
            <remarks>
            Is a PC_SET_DELETE_TRACK_RECORD_TYPE record in the Bluetooth SPP Protocol
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetDeleteTrackRecordType.#ctor(System.Int32)">
            <summary>
            Create a new instance of the <code>PcSetDeleteTrackRecordType</code>.
            </summary>
            <param name="trackIndex">The track index to delete.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetDeleteTrackRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetDeleteTrackRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetDeleteTrackRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcSetDisplayGraphics44RecordType">
            <summary>
            A command to send to the stethoscope to set the device's right display.
            </summary>
            <remarks>
            Is a PC_SET_DISPLAY_GRAPHICS_44_RECORD_TYPE record in the Bluetooth SPP Protocol
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetDisplayGraphics44RecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetDisplayGraphics44RecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
            <value></value>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetDisplayGraphics44RecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcSetDisplayGraphics34RecordType">
            <summary>
            A command sent to the stethoscope to set the device's left display.
            </summary>
            <remarks>
            Is a PC_SET_DISPLAY_GRAPHICS_34_RECORD_TYPE record in the Bluetooth SPP Protocol
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetDisplayGraphics34RecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetDisplayGraphics34RecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetDisplayGraphics34RecordType.ResponseCommands">
            <summary>
             Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcSetInputGainBRecordType">
            <summary>
              A command sent to stethoscope to set the device's raw output gain value
            </summary>
            <remarks>
              Is a PC_SET_INPUT_GAIN_B_RECORD_TYPE record in the Bluetooth SPP Protocol
              Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetInputGainBRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
              Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name = "stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetInputGainBRecordType.CommandByte">
            <summary>
              Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetInputGainBRecordType.ResponseCommands">
            <summary>
              Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcSetNewEventOptionRecordType">
            <summary>
            Enables and disables button up events for stethoscope with a firmware version
            of 3.0 or greater.
            </summary>
            <remarks>
            Is a PC_SET_NEW_EVENT_OPTION_RECORD_TYPE in the Bluetooth SPP
            Protocol Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetNewEventOptionRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetNewEventOptionRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetNewEventOptionRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcSetPcControlRecordType">
            <summary>
            A command sent to stethoscope to enables the device's buttons.
            </summary>
            <remarks>
            Is a PC_SET_PC_CONTROL_RECORD_TYPE record in the Bluetooth SPP Protocol
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetPcControlRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetPcControlRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetPcControlRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcSetStopRecorderRecordType">
            <summary>
            A command sent to the stethoscope to stop recording
            audio to or from the stethoscope's memory.
            </summary>
            <remarks>
            For 3.0 firmware.
            
            Is a PC_SET_STOP_RECORDER_RECORD_TYPE in the Bluetooth
            SPP Protocol Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetStopRecorderRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetStopRecorderRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetStopRecorderRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcSetTrackIdentificationRecordType">
            <summary>
            A command sent to the stethoscope to set the track identification for the current track.
            </summary>
            <remarks>
            For 3.0 Firmware.
            
            Is a PC_SET_TRACK_IDENTIFICATION_RECORD_TYPE record in the Bluetooth SPP Protocol
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetTrackIdentificationRecordType.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="trackIndex">The track index to add the identification to.</param>
            <param name="trackIdentification">The identification.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetTrackIdentificationRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetTrackIdentificationRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetTrackIdentificationRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcSetTrackLockRecordType">
            <summary>
            A command sent to the stethoscope to set the track lock for the current track.
            </summary>
            <remarks>
            For firmware 3.0.
            
            Is a PC_SET_TRACK_LOCK_RECORD_TYPE record in the Bluetooth SPP Protocol
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetTrackLockRecordType.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="trackIndex">The track index to unlock or lock.</param>
            <param name="locked"><c>true</c> to lock; otherwise <c>false</c> to unlock.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetTrackLockRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetTrackLockRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetTrackLockRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcSetTrackNamesRecordType">
            <summary>
            A command sent to the stethoscope to set the track name.
            </summary>
            <remarks>
            For firmware 3.0.
            
            Is a PC_SET_TRACK_NAMES_RECORD_TYPE record in the Bluetooth SPP Protocol
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetTrackNamesRecordType.#ctor(System.Int32,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="trackIndex">The track index to change the name on.</param>
            <param name="trackName">The new track name.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetTrackNamesRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetTrackNamesRecordType.CommandByte">
            <summary>
            Gets the packet command byte.  
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetTrackNamesRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcSetTrackUpDownloadRecordType">
            <summary>
            A command sent to the stethoscope to start the uploading or downloading of audio
            from or to the stethoscope's internal memory.    
            </summary>
            <remarks>
            For firmware 3.0.
            
            Is a PC_SET_TRACK_UPDOWNLOAD_RECORD_TYPE record in the Bluetooth SPP Protocol
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetTrackUpDownloadRecordType.#ctor(System.Int32)">
             <summary>
             Creates a new instance of <code>PcSetTrackUpDownloadRecordType</code> class.
             </summary>
             <param name="trackIndex">
            The track index to download from or upload to.
             </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetTrackUpDownloadRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">
            The stethoscope to generate the command for.
            </param>
            <returns>
            The packet byte payload.
            </returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetTrackUpDownloadRecordType.GetCommand(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Gets the command byte for this audio track streaming request
            </summary>
            <param name="stethoscope">
            The scope to check the properties on.
            </param>
            <returns>
            The byte value of 1 to 5 for the current streaming request.
            </returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetTrackUpDownloadRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetTrackUpDownloadRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcVoiceStreamRecordType">
            <summary>
            A command to send mulaw (ulaw) audio to the stethoscope.
            </summary>
            <remarks>
            Is a PC_VOICE_STREAM_RECORD_TYPE record in the Bluetooth SPP Protocol 
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcVoiceStreamRecordType.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:MMM.HealthCare.Scopes.Device.PcVoiceStreamRecordType"/> class.
            </summary>
            <param name="audioPayload">The audio bytes to send to the <code>Stethoscope</code>.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcVoiceStreamRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcVoiceStreamRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcVoiceStreamRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.BluetoothException">
            <summary>
              Thrown when the Stethoscope SDK encounters an error.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.BluetoothException.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.BluetoothException.#ctor(System.String)">
            <summary>
              Constructor.
            </summary>
            <param name = "message">The message to display in the exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.BluetoothException.#ctor(System.String,System.Exception)">
            <summary>
              Constructor
            </summary>
            <param name = "message">The message to display in the exception.</param>
            <param name = "innerException">The innerException to this exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.BluetoothException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Constructor.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to use for this exception.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> to use for this exception.</param>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothManager">
            <summary>
            Manages the all the bluetooth connections using the 32 feet.net.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.IBluetoothManager">
            <summary>
            Manages the Bluetooth device connections.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.IBluetoothManager.GetPairedDevices">
            <summary>
            Finds all Bluetooth stethoscopes that have been paired to the computer.
            </summary>
            <returns>A list of Bluetooth stethoscopes discovered in connect or previously paired to computer. Will return an empty list if the discovery could not be started or no devices found.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.IBluetoothManager.PairDevices">
            <summary>
            Pairs all Bluetooth stethoscopes in range to the computer.
            </summary>
            <returns>All the paired Bluetooth stethoscopes.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.IBluetoothManager.UnPairDevice(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Removes the stethoscope's pairing from the computer.
            </summary>
            <param name="toUnpair">The stethoscope to unpair.</param>
            <returns>
                <c>true</c> if the stethoscope was successfully unpaired; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.IBluetoothManager.HasBluetoothAntenna">
            <summary>
            Gets a value indicating whether Bluetooth antenna is detected.
            </summary>
            <value>
            	<c>true</c> if this instance has a bluetooth antenna; otherwise, <c>false</c>.
            </value>
            <remarks>
            <c>false</c> could be returned if the antenna is unplugged or the driver could not be initialized. 
            </remarks>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothManager.BluetoothMedicalClassOfDevice">
            <summary>
            The Bluetooth classification for a medical device.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothManager"/> class.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothManager.GetPairedDevices">
            <summary>
            Finds all Bluetooth stethoscopes in pair or previously connected to the computer.
            </summary>
            <returns>
            A list of Bluetooth stethoscopes discovered in connect or previously paired to computer. Will return an empty list if the discovery could not be started or no devices found.
            </returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothManager.PairDevices">
            <summary>
             Pairs all Bluetooth stethoscopes in range to the computer.
            </summary>
            <returns>All the paired Bluetooth stethoscopes.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothManager.UnPairDevice(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Removes the pairing from computer to stethoscope.
            </summary>
            <param name="toUnpair">The paired stethoscope to remove.</param>
            <returns>
                <c>true</c> if the stethoscope was successfully unpaired; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothManager.DiscoverDevices">
            <summary>
            Discovers the bluetooth devices.
            </summary>
            <returns>The discovered bluetooth devices.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothManager.filterToSethoscopes(InTheHand.Net.Sockets.BluetoothDeviceInfo[])">
            <summary>
            Filter and converts to stethoscopes.
            </summary>
            <param name="unfilteredBluetoothDevices">The unfiltered bluetooth devices.</param>
            <returns>Filter stethoscopes.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothManager.HasBluetoothAntenna">
            <summary>
            Gets a value indicating whether Bluetooth antenna is detected.
            </summary>
            <value>
            	<c>true</c> if this instance has bluetooth antenna; otherwise, <c>false</c>.
            </value>
            <remarks>
            <c>false</c> could be returned if the antenna is unplugged or the driver could not be initialized. 
            </remarks>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.Conductor">
            <summary>
            Provides reliable and synchronously commands.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Conductor.#ctor(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Initializes a new instance of the <see cref="T:MMM.HealthCare.Scopes.Device.Conductor"/> class.
            </summary>
            <param name="stethoscope">The stethoscope.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Conductor.SendCommandSynchronously(MMM.HealthCare.Scopes.Device.ISendCommand)">
            <summary>
            Sends the command synchronously.
            </summary>
            <param name="sendCommand">The send command.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Conductor.SendCommandSynchronously(MMM.HealthCare.Scopes.Device.ISendCommand,System.Int32)">
            <summary>
            Sends the command synchronously.
            </summary>
            <param name="sendCommand">The send command.</param>
            <param name="timeout">The timeout to wait for the synchronous command.  If \> = 0 timeout is disabled.  </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Conductor.ReceivedCommand(MMM.HealthCare.Scopes.Device.IReceiveCommand)">
            <summary>
            Receives a command.
            </summary>
            <param name="receivedCommand">The command just received.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Conductor.SendCommand(MMM.HealthCare.Scopes.Device.ISendCommand)">
            <summary>
            Sends the command.
            </summary>
            <param name="sendCommand">The send command.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Conductor.FindSendCommand(MMM.HealthCare.Scopes.Device.IReceiveCommand)">
            <summary>
            Finds the send command by the receive command.
            </summary>
            <param name="receivedCommand">The received command.</param>
            <returns>The found send command.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Conductor.Wait(MMM.HealthCare.Scopes.Device.ISendCommand,System.Int32)">
            <summary>
            Waits until the specified send command has been respond to.
            </summary>
            <param name="sendCommand">The send command.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Conductor.Notify(MMM.HealthCare.Scopes.Device.ISendCommand)">
            <summary>
            Waits until the specified send command has been responded to.
            </summary>
            <param name="sendCommand">The send command.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Conductor.addUnrequestedEvents">
            <summary>
            Add the list of events sent from the stethoscope that will not have a corresponding send command.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.ReceiveThread">
            <summary>
              A thread that receives and handles commands sent from the stethoscope
              to the PC.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ReceiveThread.#ctor(MMM.HealthCare.Scopes.Device.Stethoscope,MMM.HealthCare.Scopes.Device.Conductor)">
            <summary>
              Creates a new instance of the receive thread.
            </summary>
            <param name = "stethoscope">
              The stethoscope to receive commands from.
            </param>
            <param name = "conductor">
              The conductor used to handle the stethoscope commands.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ReceiveThread.StartThread">
            <summary>
              Starts the receive thread.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ReceiveThread.StopThread">
            <summary>
              Stops the receive thread.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ReceiveThread.ReceiveCommands">
            <summary>
              A method that handles incoming receive commands.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ReceiveThread.OnIoExceptionOccurred">
            <summary>
            Occurs when there is an error reading 
            from the Bluetooth stream.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ReceiveThread.DeserializeHeaderAttention(System.Byte)">
            <summary>
              Deserializes the attendation byte in the header.
            </summary>
            <param name = "attentionByte">The attention byte.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ReceiveThread.UpdateMetrics(System.Int32)">
            <summary>
              Updates the read metrics.
            </summary>
            <param name = "length">
              The number of bytes received.
            </param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.ReceiveThread.Thread">
            <summary>
              The receive thread.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.ReceiveThread.IsRunning">
            <summary>
              If this thread is still running.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.SendThread">
            <summary>
              A class that sends and handles commands sent from the PC to the stethoscope.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.SendThread.#ctor(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
              Creates an instance of the SendThread class.
            </summary>
            <param name = "stethoscope">
              The stethoscope to send commands to.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.SendThread.SendCommand(MMM.HealthCare.Scopes.Device.ISendCommand)">
            <summary>
              Send a command from the stethoscope to the PC.
            </summary>
            <param name = "command">
              The command to send.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.SendThread.StartThread">
            <summary>
              Starts the send thread.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.SendThread.StopThread">
            <summary>
              Stops the send thread.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.SendThread.FlushAudioCommands">
            <summary>
              Flush all commands from the unit of work. Make sure they are sent to the stethoscope.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.SendThread.ClearAudioCommands">
            <summary>
              Clear all commands from the unit of work.
              Do not send them to the stethoscope.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.SendThread.SendThreadStart">
            <summary>
              The run method for the send thread.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.SendThread.SendPendingCommands">
            <summary>
              Sends queued commands to the stethoscope stream.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.SendThread.UpdateWrittenMetrics(System.Int32)">
            <summary>
              Update the written byte metrics.
            </summary>
            <param name = "length">
              The number of bytes written.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.SendThread.OnIoException">
            <summary>
              Occurs when the stethoscope disconnects from the computer.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.SendThread.CreateUnitOfWork">
            <summary>
            Creates the unit of work base on stethoscope version.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.SendThread.BytesWritten">
            <summary>
              The total number of bytes written to the stethoscope in this session.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.SendThread.BytesWrittenPerSecond">
            <summary>
              The number of bytes written to the stethoscope in the last second.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.SendThread.Thread">
            <summary>
              The running thread.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.SendThread.IsRunning">
            <summary>
              Gets a value to determine if the thread is still running.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.UnitOfWork">
            <summary>
              Sends send commands in bulk to the
              stethoscope.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.UnitOfWork.#ctor(MMM.HealthCare.Scopes.Device.Serializer,System.IO.Stream,System.Int32)">
            <summary>
              Creates a new instance of the UnitOfWork class.
            </summary>
            <param name = "serializer">The command serializer.</param>
            <param name = "stream">The output stream.</param>
            <param name = "optimizedCount">The optimized number of packets to send.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.UnitOfWork.Add(MMM.HealthCare.Scopes.Device.ISendCommand)">
            <summary>
              Added send command to be sent in bulk.
            </summary>
            <param name = "sendCommand">sendCommand The send command to add.</param>
            <returns>The amout of bytes sent.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.UnitOfWork.Flush">
            <summary>
              Sends the bulked commands to the stethoscope immediately.
            </summary>
            <returns>The number of bytes sent.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.UnitOfWork.Clear">
            <summary>
              Empties the pending commands to be sent.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.UnitOfWork.SendCommands">
            <summary>
              Send our bulked commands to the stethoscope.
            </summary>
            <returns>The number of bytes sent</returns>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.AudioInputSwitch">
            <summary>
            Valid types for the stethoscope input switch.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.AudioInputSwitch.BeforeFilter">
            <summary>
            Sound is being sent from the stethoscope to the PC before the filter is applied.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.AudioInputSwitch.AfterFilter">
            <summary>
            Sound is being sent from the stethoscope to the PC after the filter is applied.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.AudioInputSwitch.RawOutput">
            <summary>
            Sound is being sent from the stethoscope to the PC in its raw format on channel B.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.HeadsetAudioSource">
            <summary>
            Switch the audio source to the stethoscope headset.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.HeadsetAudioSource.Microphone">
            <summary>
            Audio is streamed from the stethoscope's internal microphone to the headset.
            
            Note, audio is still requested from the computer but is never used.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.HeadsetAudioSource.Computer">
            <summary>
            Audio is streamed from the computer to the headset.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.HeadsetAudioSource.Mixed">
            <summary>
            Audio is streamed and mixed from the computer and the stethoscope's internal
            microphone to the headset
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.AudioOutputSwitch">
            <summary>
            Valid types for the stethoscope output switch.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.AudioOutputSwitch.BeforeFilter">
            <summary>
            Sound is being sent to the stethoscope from the PC before the filter is applied.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.AudioOutputSwitch.AfterFilter">
            <summary>
            Sound is being sent to the stethoscope from the PC after the filter is applied.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.AudioType">
            <summary>
            Valid audio types to use for uploading and downloading.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.AudioType.Body">
            <summary>
            Represents body sound audio. For example, heart, lung, and bowel.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.AudioType.VoiceComment">
            <summary>
            Represents recorded voice audio. Typically dictation or other comments
            from the specialist.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.Errors">
            <summary>
            Errors that occur on the stethoscope.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Errors.DataOverrunError">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Errors.InvalidRecordLengthError">
            <summary>
            A packet has been sent to the stethoscope with a bad packet length size.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Errors.InvalidChecksumError">
            <summary>
            A packet has been sent to the stethoscope with a bad checksum.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Errors.BadPacketSequenceNumber">
            <summary>
            A packet has been sent to the stethoscope with a bad packet sequence number.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Errors.StethoscopeRecordingAudioError">
            <summary>
            The stethoscope has encountered an error while attempting to record audio.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Errors.StethoscopePlayingAudioError">
            <summary>
            The stethoscope has encountered an error while attempting to play audio.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Errors.QueueOverflowError">
            <summary>
            Too many commands were sent to the stethoscope at one time causing some commands
            to be discarded.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Errors.InternalStethoscopeError">
            <summary>
            The stethoscope has encountered an internal error.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Errors.BadCommandByte">
            <summary>
            The stethoscope has received a command with a bad command byte.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Errors.BadCommandParameter">
            <summary>
            The stethoscope has received a command with a bad parameter.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Errors.AudioRecorderBusy">
            <summary>
            The stethoscope's audio recorder is busy.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Errors.AudioTrackLocked">
            <summary>
            The stethoscope's audio track is locked.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Errors.AudioTrackBodyEmpty">
            <summary>
            The stethoscope's audio track body is empty.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Errors.AudioTrackVoiceEmpty">
            <summary>
            The stethoscope's audio track voice is empty.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.InputSelectorMode">
            <summary>
            Valid types for the scope input selector mode.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.InputSelectorMode.None">
            <summary>
            No audio will be streamed to the stethoscope.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.InputSelectorMode.MicrophoneStream">
            <summary>
            Voice audio will be streamed to the stethoscope.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.InputSelectorMode.AudioStream">
            <summary>
            SPP audio will be streamed to the stethoscope.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.InputSelectorMode.MixedModeStream">
            <summary>
            Audio will be streamed to the stethoscope with both the microphone and
            audio streams turned on.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.StreamingStates">
            <summary>
            The stethoscopes streaming state.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.StreamingStates.NotStreaming">
            <summary>
            The stethoscope is currently not streaming.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.StreamingStates.StreamingAudioFromPCToStethoscope">
            <summary>
            The stethoscope is streaming audio from the PC to the stethoscope.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.StreamingStates.StreamingAudioFromStethoscopeToPC">
            <summary>
            The stethoscope is streaming audio from the stethoscope to the PC.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.StreamingStates.StreamingAudioFromPCToStethoscopeAndFromStethoscopeToPC">
            <summary>
            The stethoscope is streaming audio from the PC to the stethoscope and
            from the stethoscope to the PC.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.StreamingStates.UploadingAudioFromPCToStethoscope">
            <summary>
            The stethoscope is uploading audio from the PC to the stethoscope.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.StreamingStates.DownloadingAudioFromStethoscopeToPC">
            <summary>
            The stethoscope is downloading audio from the stethoscope to the PC.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.FilterConvertor">
            <summary>
            Converts the Enums that represent the local switch values into values that the physical 
            stethoscope can use.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.FilterConvertor.getOutputSwitchType(MMM.HealthCare.Scopes.Device.AudioInputSwitch)">
            <summary>
            Converts the local <code>AudioInputSwitch</code> into a Stethoscope's <code>OutputSwitchType</code>.
            </summary>
            <param name="filter">The <code>AudioInputSwitch</code> to convert.</param>
            <returns>The <code>OutputSwitchType</code>.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.FilterConvertor.getInputSwitchType(MMM.HealthCare.Scopes.Device.AudioOutputSwitch)">
            <summary>
            Converts the local <code>AudioOutputSwitch</code> into a Stethoscope's <code>InputSwitchType</code>.
            </summary>
            <param name="filter">The <code>AudioOutputSwitch</code> to convert.</param>
            <returns>The <code>InputSwitchType</code>.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.FilterConvertor.getInputSelectorMode(MMM.HealthCare.Scopes.Device.HeadsetAudioSource)">
            <summary>
            Converts the local <code>HeadsetAudioSource</code> into a Stethoscope's <code>InputSelectorMode</code>.
            </summary>
            <param name="mode">The <code>HeadsetAudioSource</code> to convert.</param>
            <returns>The <code>InputSelectorMode</code></returns>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.EmbeddedResourceExtractor">
            <summary>
            Extracts embedded resources from assembly.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.EmbeddedResourceExtractor.FindBuiltInDisplayBitmap(MMM.HealthCare.Scopes.Device.BuiltInDisplay)">
            <summary>
            Finds the built in display bitmap.
            </summary>
            <param name="builtInDisplay">The built in display bitmap to find.</param>
            <returns>The found display bitmap.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.EmbeddedResourceExtractor.FindBuiltInDisplay(MMM.HealthCare.Scopes.Device.BuiltInDisplay)">
            <summary>
            Finds the display icon bytes.
            </summary>
            <param name="builtInDisplay">The display icon.</param>
            <returns>The display icon bytes.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.EmbeddedResourceExtractor.FindEmbeddedResoure(System.String)">
            <summary>
            Finds the embedded resource.
            </summary>
            <param name="name">The embedded resource name.</param>
            <returns>The embedded resource bytes.</returns>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.BuiltInDisplay">
            <summary>
            The built-in display images.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.BuiltInDisplay.Bluetooth">
            <summary>
            Displays a Bluetooth icon on the right side.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.BuiltInDisplay.Bell">
            <summary>
            Displays a bell icon on the left side and a Bluetooth icon on the right side.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.BuiltInDisplay.Diaphragm">
            <summary>
            Displays a diaphragm icon on the left side and a Bluetooth icon on the right side.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.BuiltInDisplay.ExtendedRange">
            <summary>
            Displays an extended range icon on the left side and Bluetooth icon on the right side.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.ErrorEventArgs">
            <summary>
            The event arguements for the <see cref="E:MMM.HealthCare.Scopes.Device.Stethoscope.Error"/> event.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ErrorEventArgs.#ctor(MMM.HealthCare.Scopes.Device.Errors,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MMM.HealthCare.Scopes.Device.ErrorEventArgs"/> class.
            </summary>
            <param name="error">The <see cref="T:MMM.HealthCare.Scopes.Device.Errors"/> type.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.ErrorEventArgs.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.ErrorEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.E3kButtonEventRecordType">
            <summary>
              A command received from the stethoscope with button states.
            </summary>
            <remarks>
              Is a E3K_BUTTON_EVENT_RECORD_TYPE record in the Bluetooth SPP Protocol Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.E3kButtonEventRecordType.DeserializePayload(MMM.HealthCare.Scopes.Device.Stethoscope,System.Byte[])">
            <summary>
              Deserializes a packet byte payload from the stethoscope.
            </summary>
            <param name = "stethoscope">The stethoscope to deserialize for.</param>
            <param name = "payload">The packet byte payload.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.E3kButtonEventRecordType.DeserializeButtons(MMM.HealthCare.Scopes.Device.Stethoscope,System.Byte[])">
            <summary>
              Deserializes the stethoscope buttons.
            </summary>
            <param name = "stethoscope">The stethoscope.</param>
            <param name = "buttonBytes">The button bytes.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kButtonEventRecordType.CommandByte">
            <summary>
              Gets the packet command byte.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.E3kReplyAckRecordType">
            <summary>
              A command received from the stethoscope with the devices acknowledgment data.
            </summary>
            <remarks>
              Is a E3K_REPLY_ACK_RECORD_TYPE record in the Bluetooth SPP Protocol Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.E3kReplyAckRecordType.DeserializePayload(MMM.HealthCare.Scopes.Device.Stethoscope,System.Byte[])">
            <summary>
              Deserializes a packet byte payload from the stethoscope.
            </summary>
            <param name = "stethoscope">The stethoscope to deserialize for.</param>
            <param name = "payload">The packet byte payload.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kReplyAckRecordType.SequenceNumber">
            <summary>
              Gets the acknowledged sequence number.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kReplyAckRecordType.AcknowledgedCommandByte">
            <summary>
              Gets the acknowledged command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kReplyAckRecordType.CommandByte">
            <summary>
              Gets the packet command byte.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.E3kReplyErrorInfoRecordType">
            <summary>
              A command received from the stethoscope with the error information.
            </summary>
            <remarks>
              Is a E3k_REPLY_ERROR_INFO_RECORD_TYPE record in the Bluetooth SPP Protocol Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.E3kReplyErrorInfoRecordType.DeserializePayload(MMM.HealthCare.Scopes.Device.Stethoscope,System.Byte[])">
            <summary>
              Deserializes a packet byte payload from the stethoscope.
            </summary>
            <param name = "stethoscope">The stethoscope to deserialize for.</param>
            <param name = "payload">The packet byte payload.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kReplyErrorInfoRecordType.CommandByte">
            <summary>
              Gets the packet command byte.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.E3kReplyPingRecordType">
            <summary>
              Ping acknowledgment received from the stethoscope.
            </summary>
            <remarks>
              Is a E3K_REPLY_PING_RECORD_TYPE record in the Bluetooth SPP Protocol 
              Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.E3kReplyPingRecordType.DeserializePayload(MMM.HealthCare.Scopes.Device.Stethoscope,System.Byte[])">
            <summary>
              Deserializes a packet byte payload from the stethoscope.
            </summary>
            <param name = "stethoscope">The stethoscope to deserialize for.</param>
            <param name = "payload">The packet byte payload.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kReplyPingRecordType.CommandByte">
            <summary>
              Gets the packet command byte.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcPingRecordType">
            <summary>
            Command type sent from the PC to the stethoscope to keep the 
            stethoscope connection alive.
            </summary>
            <remarks>
            Is a PC_PING_RECORD_TYPE record in the Bluetooth SPP Protocol 
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcPingRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcPingRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcPingRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcSetSwitchRecordType">
            <summary>
            A command sent to stethoscope that changes the audio settings.
            </summary>
            <remarks>
            Is a PC_SET_SWITCH_RECORD_TYPE record in the Bluetooth SPP Protocol 
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcSetSwitchRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetSwitchRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcSetSwitchRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.ConfigurationFactory">
            <summary>
              Creates BluetoothManger and Logger classes.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ConfigurationFactory.RegisterLogger``1">
            <summary>
              Registers the type of logger you want to use. Current available values are <see cref="T:MMM.HealthCare.Scopes.Device.Log4NetLogger"/> or <see cref="T:MMM.HealthCare.Scopes.Device.NullLogger"/>.
            </summary>
            <example>
              // Register the logger with the factory.
              ILogger logger = ConfigurationFactory.RegisterLogger&lt;Log4NetLogger&gt;();
                
              // Get the logger back from the factory.
              ILogger logger = ConfigurationFactory.GetLogger&lt;Stethoscope&gt;();
                
              try
              {
                // Do some work here.
              }
              catch (Exception exception)
              {
                logger.error("This is an error", exception);
              }
            </example>
            <typeparam name="T">The type of logger you want to use.</typeparam>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ConfigurationFactory.GetBluetoothManager">
            <summary>
              Gets a new instance of the <see cref="T:MMM.HealthCare.Scopes.Device.IBluetoothManager"/> Interface.
            </summary>
            <example>
              IBluetoothManager manager;
                
              try
              {
                manager = ConfigurationFactory.GetBluetoothManager();
              }
              catch (Excpetion exception)
              {
                Console.WriteLine(exception.StackTrace);
              }
                
              List&lt;IBluetoothDevice&gt; discoveredStethoscopes;
                
              try
              {
                discoveredStethoscopes = manager.DiscoverDevices();
              }
              catch (Exception exception)
              {
                Console.WriteLine(exception.StackTrace);
              }
            </example>
            <returns>The BluetoothManager.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ConfigurationFactory.SetLicenseFile(System.String)">
            <summary>
            Sets the license file to use.
            </summary>
            <param name="fileName">The license file name.</param>
            <exception cref="T:System.IO.FileNotFoundException">If the file is not found.</exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ConfigurationFactory.RegisterBluetoothManager``1">
            <summary>
              Register the type of Bluetooth Manager to use.  Defaults to a <see cref="T:MMM.HealthCare.Scopes.Device.ThirtyTwoFeetBluetoothManager"/>.
            </summary>
            <typeparam name="T">The <see cref="!:IBlueoothManager"/> type.</typeparam>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ConfigurationFactory.GetLogger``1">
            <summary>
              Gets a new instance of the <c>ILogger</c> Interface.
            </summary>
            <example>
              ILogger logger = ConfigurationFactory.GetLogger&lt;Stethoscope&gt;();
                
              try
              {
                // Do some work here.
              }
              catch (Exception exception)
              {
                logger.error("This is an error", exception);
              }
            </example>
            <returns>The Logger.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ConfigurationFactory.GetLoggerConstructorType">
            <summary>
              Gets the logger class constructor type.
            </summary>
            <returns>The constructor type.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ConfigurationFactory.GuardAgainstNoLicense">
            <summary>
            Prevents developers from using the JAR file without valid license file
            </summary>   
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.ConfigurationFactory.ConstructorType">
            <summary>
              The <see cref="T:MMM.HealthCare.Scopes.Device.ILogger"/> constructor type.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.Filter">
            <summary>
            The stethosope's sound filter modes.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Filter.Bell">
            <summary>
            Amplifies sound from 20 - 1000 Hz. Emphasizes lower frequency sound between 
            20 - 200 Hz.
            
            Typically used to listen to intestinal and heart murmur sounds.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Filter.Diaphragm">
            <summary>
            Amplifies sound from 20 - 2000 Hz. Emphasizes lower frequency sound between 
            100 - 500 Hz.
            
            Typically used to listen to lung sounds.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Filter.ExtendedRange">
            <summary>
            Amplifies sound from 20 - 2000 Hz. Is similar to Diaphragm but provides 
            more low frequency response between 50 - 500 Hz.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.BitmapConverter">
            <summary>
            Converts the bitmap to sethoscope display bytes.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.BitmapConverter.ToBytes(System.Drawing.Bitmap)">
            <summary>
            Convert the bitmap to stethoscope bytes.
            </summary>
            <param name="bitmap">The bitmap. Required to be 46 x 16.</param>
            <returns>The bytes.</returns>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.ByteBuffer">
            <summary>
             A stethoscope internal receive byte buffer.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ByteBuffer.RemoveFirstPacket">
            <summary>
            Removes the first packet in the byte buffer.
            </summary>
            <returns>The first found packet bytes if found; otherwise, null.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ByteBuffer.AddBytes(System.Collections.IEnumerable)">
            <summary>
            Adds the bytes to buffer.
            </summary>
            <param name="bytes">The bytes to add.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ByteBuffer.AddByte(System.Byte)">
            <summary>
            Add the byte to buffer.
            </summary>
            <param name="byte">The byte to add.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ByteBuffer.FindFirstPacketHeader(System.Collections.Generic.List{System.Byte})">
            <summary>
            Finds the first packet header index.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The first packet header index if found; otherwise -1.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ByteBuffer.RemovePacketBytes">
            <summary>
            remove the packet bytes from the buffer.
            </summary>
            <returns>The packet bytes, if found; otherwise, null.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ByteBuffer.FindPacketLength">
            <summary>
            Finds the packet length.
            </summary>
            <returns>The packet length.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ByteBuffer.RemoveBytesUpToHeader(System.Int32)">
            <summary>
            Removes the all the bytes up to header.
            </summary>
            <param name="headerIndex">The packet header index.</param>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.ByteArrayHelper">
            <summary>
            A helper for byte arrays.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ByteArrayHelper.ConvertBytesToString(System.Byte[])">
            <summary>
            Converts the byte array to string.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.InputSwitchType">
            <summary>
             Valid types for the stethoscope input switch.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.InputSwitchType.None">
            <summary>
            No sound is being sent to stethoscope.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.InputSwitchType.BeforeFilter">
            <summary>
            Sound is being sent to the stethoscope before the filter is applied.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.InputSwitchType.AfterFilter">
            <summary>
            Sound is being sent to the stethoscope after the filter is applied.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.MemorySwitchType">
            <summary>
            Valid types for the stethoscope memory mode.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.MemorySwitchType.None">
            <summary>
            Not downloading or uploading to stethoscope memory.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.MemorySwitchType.UploadRecording">
            <summary>
            Starts the downloading of audio from the stethoscope to the PC.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.MemorySwitchType.DownloadRecording">
            <summary>
            Starts the uploading audio from the PC to the stethoscope.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.MemorySwitchType.StopUploadAndDownload">
            <summary>
            Stops the downloading or uploading to or from stethoscope memory.
            Note: this differs from none because if none is sent to the Stethoscope
            the audio still in the stethoscope's internal buffer and not yet
            processed will be destroyed.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.OutputSwitchType">
            <summary>
            Valid types for the stethoscope output switch.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.OutputSwitchType.None">
            <summary>
            No sound is being sent from the stethoscope.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.OutputSwitchType.BeforeFilter">
            <summary>
            Sound is being sent from the stethoscope before the filter is applied.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.OutputSwitchType.AfterFilter">
            <summary>
            Sound is being sent from the stethoscope after the filter is applied.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.OutputSwitchType.RawOutput">
            <summary>
            Sound is being sent from the stethoscope in its raw format on channel B.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.ParameterValidator">
            <summary>
            Validates method and property parameters.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ParameterValidator.IsNotNull(System.Object,System.String)">
            <summary>
            Throws an exception when the parameter is equal to <c>null</c>.
            </summary>
            <param name="parameterValue">The parameter value.</param>
            <param name="parameterName">The parameter name.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when the parameter is <code>null</code>.</exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ParameterValidator.IsNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception when the parameter is equal to <c>null</c> or empty string.
            </summary>
            <param name="parameterValue">The parameter value.</param>
            <param name="parameterName">The parameter name.</param>
            <exception cref="T:System.ArgumentException">Occurs when the parameter is <code>null</code> or empty.</exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ParameterValidator.IsOutOfRange(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Throws an exception when the parameter is not between the minimum and maximum values.
            </summary>
            <param name="parameterValue">The parameter value.</param>
            <param name="parameterName">The parameter name.</param>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the parameter string length is out of range.</exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ParameterValidator.IsOutOfRange(System.TimeSpan,System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            Throws an exception when the parameter is not between the minimum and maximum values.
            </summary>
            <param name="parameterValue">The parameter.</param>
            <param name="parameterName">The parameter name.</param>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the parameter <code>TimeSpan</code> is out of range.</exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ParameterValidator.IsOutOfRange(System.String,System.String,System.Int32)">
            <summary>
            Determines whether parameter strings length is out of range.
            </summary>
            <param name="parameterValue">The parameter value.</param>
            <param name="parameterName">The parameter name.</param>
            <param name="maximumLength">The maximum string length.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the parameter string length is out of range.</exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ParameterValidator.IsOutOfRange(System.String,System.String,System.Char,System.Char)">
            <summary>
            Throws an exception when the parameter string contains character outside the minimum and maximum characters.
            </summary>
            <param name="parameterValue">The parameter value.</param>
            <param name="parameterName">The parameter name.</param>
            <param name="minimum">The minimum character.</param>
            <param name="maximum">The maximum character.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the parameter string characters are out of range.</exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ParameterValidator.ValidateBitmap(System.Drawing.Image)">
            <summary>
            Throws an exception if the image is not a bitmap or if the bitmap's dimensions are
            not 46 x 16.
            </summary>
            <param name="image">The image to validate.</param>
            <exception cref="T:System.ArgumentException">
            Occurs if the image is not a bitmap or the bitmap's dimensions are not 46 x 16.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ParameterValidator.ValidateBitmapStream(System.IO.Stream)">
            <summary>
            Throws an exception if the image stream does not represent a bitmap file.
            </summary>
            <param name="bitmapStream">The stream to validate.</param>
            <exception cref="T:System.ArgumentException">
            Occurs if the stream is not a bitmap image.
            </exception>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.StethoscopeAudioBlockRequest">
            <summary>
            Represents one audio block request from the stethoscope.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioBlockRequest.#ctor(System.Int32,System.Boolean)">
            <summary>
            instantiates a new StethoscopeAudioBlock Object.
            </summary>
            <param name="blocksRequested">The number of audio blocks to send</param>
            <param name="endOfOutputStreamEnabled">If the end of output stream event should be enabled.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeAudioBlockRequest.AudioBlocksRequested">
            <summary>
            Gets the number of audio blocks to send for this request.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeAudioBlockRequest.IsEndOfOutputStreamEnabled">
            <summary>
            Gets if the end of output stream event is enabled.
            </summary>
            <remarks><c>true</c>if the end of output stream event is enabled. Otherwise <c>false</c></remarks>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager">
            <summary>
              Manages the audio streaming to and from the Stethoscope.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.#ctor(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
              Constructor
            </summary>
            <param name = "stethoscope">
              The stethoscope we will manage audio for.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.SetDefaultFilterTypes">
            <summary>
              Sets the default filter types to none.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.StartStreaming(MMM.HealthCare.Scopes.Device.StreamingStates,System.Int32)">
            <summary>
              Starts streaming audio to / from the stethoscope.
            </summary>
            <param name = "streamingState">
              The streaming state to be entered.
            </param>
            <param name = "trackIndex">
              The track to use for uploading and downloading if applicable.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.StopStreaming(System.Int32)">
            <summary>
              Stops streaming audio to and from the stethoscope.
            </summary>
            <param name = "trackIndex">
              The audio track to stop stream to or from. Only used for upload and download.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.cleanupOutputObjects">
            <summary>
              Clears the list of audio blocks and flips a flag to stop the audio blocks
              sending thread.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.StopAudioStreaming(MMM.HealthCare.Scopes.Device.OutputSwitchType,MMM.HealthCare.Scopes.Device.InputSwitchType,MMM.HealthCare.Scopes.Device.InputSelectorMode)">
            <summary>
              Stops audio streaming based upon the passed in parameters.
            </summary>
            <param name = "outputSwitch">
              The new value of the outputFilterType. Set to None to stop
              streaming, otherwise set to one of its streaming values.
            </param>
            <param name = "inputSwitch"> 
              The new value of the inputFilterType. Set to None to stop
              streaming, otherwise set to one of its streaming values.
            </param>
            <param name = "inputMode">
              The new input selector mode. Set to None to have no selector
              mode, otherwise set to one of its streaming selector modes.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.BeginSendingAudioToStethoscope">
            <summary>
              Starts the transmitting of audio data to the stethoscope if possible 
              otherwise registers a listener to let us know when it is ready and then
              starts transmitting when the event is returned.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.OutputScopeStreamCanBeginTransmitting">
            <summary>
              Wait till the stream is ready to begin transmitting audio and then
              call audio blocks requested when we are ready.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.CleanupStream(MMM.HealthCare.Scopes.Device.StethoscopeStream)">
            <summary>
              Clears the passed in stream.
            </summary>
            <param name = "stream">
              The stream to clear.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.SetFilters(MMM.HealthCare.Scopes.Device.OutputSwitchType,MMM.HealthCare.Scopes.Device.InputSwitchType,MMM.HealthCare.Scopes.Device.InputSelectorMode,MMM.HealthCare.Scopes.Device.MemorySwitchType)">
            <summary>
              Sets the filters for audio streaming.
            </summary>
            <param name = "outputFilterType">
              The output filter to use.
            </param>
            <param name = "inputFilterType">
              The input filter to use.
            </param>
            <param name = "inputSelectorMode">
              The input selector mode to use.
            </param>
            <param name = "memoryMode">
              The memory mode to use.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.ClearInputStream">
            <remarks>
              Clears the input stream if possible.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.GetStethoscopeTrack(MMM.HealthCare.Scopes.Device.Stethoscope,System.Int32)">
            <summary>
              Get the stethoscope track object for this index.
            </summary>
            <param name = "stethoscope">The scope to search for tracks on.</param>
            <param name = "index">The track index to look for.</param>
            <returns>The stethoscope track found or null if no track is found.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.IsTrackEmpty(System.Int32,MMM.HealthCare.Scopes.Device.AudioType)">
            <summary>
              Determines if an audio track has a recording for a certain audio type.
            </summary>
            <param name = "trackIndex">The track index.</param>
            <param name = "audioType">The audio type to check for.</param>
            <returns>
              <c>true</c> if the track is empty for the specified audio
              type. otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.IsUploadDownload(MMM.HealthCare.Scopes.Device.StreamingStates)">
            <summary>
              Get if the passed in streaming state is an upload or download streaming state.
            </summary>
            <param name = "streamingState">The <code>StreamingStates</code> to check if we are uploading or download.</param>
            <returns>
              <c>true</c> if the streaming state is an upload or download state.  Otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.stopCurrentStreaming(MMM.HealthCare.Scopes.Device.StreamingStates)">
            <summary>
              Stops any streaming we are currently doing based upon the passed in streaming state.
            </summary>
            <param name = "resultStreamingState">The streaming state we are moving too.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.GetNumberOfPacketsToFillTrack">
            <summary>
              Gets the number of packets needed to fill an audio track.
            </summary>
            <returns>
              The number of packets to fill an audio track.
            </returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.SendAudioBlocks">
            <summary>
              Sends audio blocks from the PC to the Stethoscope.
            </summary>
            <remarks>
              Note: This method always runs on its own thread.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.IsStreamingFromPCToStethoscope">
            <summary>
              Gets if we are streaming audio from the PC to the stethoscope.
            </summary>
            <returns>
              <c>true</c> if we are streaming audio from the PC to the stethoscope. otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.SleepThread(System.Int32)">
            <summary>
              Sleeps the current thread.
            </summary>
            <param name = "milliseconds">The length of time in milliseconds to sleep for.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.StartAudioInput(MMM.HealthCare.Scopes.Device.AudioInputSwitch)">
            <summary>
              Starts streaming audio from the stethoscope to the computer.
            </summary>
            <param name = "audioInputSwitch">
              The audio input switch.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.StartAudioOutput(MMM.HealthCare.Scopes.Device.AudioOutputSwitch,MMM.HealthCare.Scopes.Device.HeadsetAudioSource)">
            <summary>
              Starts streaming audio from the computer to stethoscope.
            </summary>
            <param name = "audioOutputSwitch">
              The audio output switch
            </param>
            <param name = "audioSource">
              The audio source.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.StopAudioInput">
            <summary>
              Stop streaming audio from the stethoscope to the computer.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.StopAudioOutput">
            <summary>
              Stop streaming audio from the computer to the stethoscope.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.StopAudioInputAndOutput">
            <summary>
              Stops streaming audio from the stethoscope to the computer and also from
              the computer to the stethoscope.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.StartUploadTrack">
            <summary>
              Sends local audio to the stethoscope for storage. The scope can only hold
              about 29 seconds worth of audio.
            
              Works will all stethoscope firmware versions. If using a scope with
              multiple tracks it will default to track 0 with audio type of body.
            
              Note: you must call stopUploadDownloadAudio() when done sending audio to
              the scopes internal buffer otherwise the data still in the scopes buffer
              but not yet processed will be thrown away and not recorded to memory.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.StartUploadTrack(System.Int32,MMM.HealthCare.Scopes.Device.AudioType)">
            <summary>
              Sends local audio to the stethoscope for storage. The scope can only hold
              about 29 seconds worth of audio.
             
              Only works with stethoscope's that have multiple tracks. (Firmware
              Version 3.0 and greater)
            
              Note: you must call stopUploadDownloadAudio() when done sending audio to
              the scopes internal buffer otherwise the data still in the scopes buffer
              but not yet processed will be thrown away and not recorded to memory.
            </summary>
            <param name="trackIndex">
              The stethoscope track you want to upload audio to.
            </param>
            <param name="audioType">
              The type of audio you want to upload. Either Body or
              VoiceComment.
            </param>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope does not support multiple tracks.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.startDownloadTrack">
            <summary>
              Retrieves audio stored in memory from the stethoscope.
            
              Works will all stethoscope firmware versions. If using a scope with
              multiple tracks it will default to track 0 with audio type of body.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.StartDownloadTrack(System.Int32,MMM.HealthCare.Scopes.Device.AudioType)">
            <summary>
              Retrieves audio stored in memory from the stethoscope.
            
              Only works with stethoscope's that have multiple tracks. (Firmware
              Version 3.0 and greater)
            </summary>
            <param name = "trackIndex">
              The track on the stethoscope you want to download audio from.
            </param>
            <param name = "audioType">
              The type of audio downloaded from the stethoscope.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.StopUploadAndDownloadTrack">
            <summary>
              Stops uploading or downloading audio from the stethoscope.
                
              Only works with stethoscope's that have multiple tracks. (Firmware
              Version 3.0 and greater)
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.Cleanup">
            <summary>
              Cleans up any resources currently in use.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.AudioBlocksRequested(System.Int32,System.Boolean)">
            <summary>
              Adds audio packets to the list of pending send requests.
            
              Note, this method needs to run on another thread besides the received thread.
            </summary>
            <param name = "numberOfAudioBlocksRequested">The number of packets to send.</param>
            <param name = "endOfOutputStreamEnabled"> If the end of output stream event should be enabled or not.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.OutputSwitchType">
            <summary>
              Gets the output switch type.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.InputSwitchType">
            <summary>
              Gets the input switch type.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.InputSelectorMode">
            <summary>
              Gets the input selector mode.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.MemorySwitchType">
            <summary>
              Gets the memory switch type.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.AudioType">
            <summary>
              Gets the audio type.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.OutputAudioStream">
            <summary>
              Gets the output stream that writes audio from the computer to the stethoscope.
            </summary>
            <remarks>
              The Audio Output Stream is cleared when calling <code>StopAudioOutput</code> or 
              <code>StopUploadDownloadTrack</code>.
            </remarks>
            <returns>
              The output stream. Returns <code>null</code> when the output stream is closed.
            </returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.InputAudioStream">
            <summary>
              Gets the input stream that reads audio from the stethoscope to computer
            </summary>
            <remarks>
              The Audio Input Stream is cleared when calling <code>StartAudioInput</code> or 
              <code>StartDownloadTrack</code>.
            </remarks>
            <return>
              The input stream. Returns <code>null</code> when the input stream is closed.
            </return>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.StreamingState">
            <summary>
              Gets the current <code>StreamingStates</code> of the Stethoscope.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeAudioManager.InitialStreamingState">
            <summary>
              Gets the initial <code>StreamingStates</code> of the Stethoscope.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.StethoscopeStream">
            <summary>
              Stream used by the stethoscope class to track the read and write position of a memory stream.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.#ctor(System.Boolean,System.Boolean)">
            <summary>
              Initializes a new instance of the <code>StethoscopeStream</code> class.
            </summary>
            <param name = "canRead">Sets if this stream can be read from.</param>
            <param name = "canWrite">Sets if this stream can be written to.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.ReadByte">
            <summary>
              Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at
              the end of the stream.
            </summary>
            <returns>
              The unsigned byte cast to an Int32, or -1 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">
              The stream does not support reading.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Methods were called after the stream was closed or when the stream is disposed.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Reads a sequence of bytes from the current stream and advances the position within the stream by the
              number of bytes read.
            </summary>
            <param name="bytes">
              An array of bytes. When this method returns, the buffer contains the specified byte array with the values
              between offset and (offset + count - 1) replaced by the bytes read from the current source. 
            </param>
            <param name="offset">
              The zero-based byte offset in buffer at which to begin storing the data read from the current stream.
            </param>
            <param name="count">
              The maximum number of bytes to be read from the current stream. 
            </param>
            <returns>
              The total number of bytes read into the buffer.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              Thrown when the stream is disposed.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.WriteByte(System.Byte)">
            <summary>
              Writes a byte to the current position in the stream and advances
              the position within the stream by one byte.
            </summary>
            <param name = "value">The byte to write to the stream.</param>
            <exception cref = "T:System.IO.IOException">
              An I/O error occurs.
            </exception>
            <exception cref = "T:System.NotSupportedException">
              The stream does not support writing, or the stream is already
              closed.
            </exception>
            <exception cref = "T:System.ObjectDisposedException">
              Methods were called after the stream was closed or when the stream is disposed.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Writes a sequence of bytes to the current stream and advances the current position within this stream by
              the number of bytes written.
            </summary>
            <param name = "buffer">An array of bytes. This method copies 
              <paramref name = "count" /> bytes from <paramref name = "buffer" />to the current stream.
            </param>
            <param name = "offset">The zero-based byte offset in 
              <paramref name = "buffer" /> at which to begin copying bytes to the current stream.
            </param>
            <param name = "count">
              The number of bytes to be written to the current stream.
            </param>
            <exception cref = "T:System.ArgumentException">
              The sum of <paramref name = "offset" /> and 
              <paramref name = "count" /> is greater than the buffer length.
            </exception>
            <exception cref = "T:System.ArgumentNullException">
              <paramref name = "buffer" /> is null.
            </exception>
            <exception cref = "T:System.ArgumentOutOfRangeException">
              <paramref name = "offset" /> or <paramref name = "count" /> is negative.
            </exception>
            <exception cref = "T:System.IO.IOException">
              An I/O error occurs.
            </exception>
            <exception cref = "T:System.NotSupportedException">
              The stream does not support writing.
            </exception>
            <exception cref = "T:System.ObjectDisposedException">
              Methods were called after the stream was closed or when the stream is disposed.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.Flush">
            <summary>
              Not implemented. Does not do anything.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.Close">
            <summary>
              Closes the current stream and releases any resources (such as
              sockets and file handles) associated with the current stream.
            </summary>
            <exception cref = "T:System.ObjectDisposedException">
              Methods were called after the stream was closed or the stream is already disposed.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              This method is not supported and always throws a 
              <code>NotSupportedException</code>
            </summary>
            <param name = "offset"></param>
            <param name = "origin"></param>
            <returns></returns>
            <exception cref = "T:System.ObjectDisposedException">
              Methods were called after the stream was closed or the stream is already disposed.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.SetLength(System.Int64)">
            <summary>
              This method is not supported and always throws a <see cref="T:System.NotSupportedException"/> exception.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.Clear">
            <summary>
              Empties the bytesToCopy.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.InternalRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Reads a sequence of bytes from the current stream and advances the position within the stream by the
              number of bytes read.
            </summary>
            <param name = "bytes">
              An array of bytes. When this method returns, the buffer contains the specified byte array with the values
              between offset and (offset + count - 1) replaced by the bytes read from the current source. 
            </param>
            <param name = "offset">
              The zero-based byte offset in buffer at which to begin storing the data read from the current stream.
            </param>
            <param name = "count">
              The maximum number of bytes to be read from the current stream. 
            </param>
            <returns>
              The total number of bytes read into the buffer.
            </returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.InternalWrite(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Writes a sequence of bytes to the current stream and advances the current position within this stream by
              the number of bytes written.
            </summary>
            <param name = "bytes">
              An array of bytes. This method copies <paramref name = "count" /> bytes from 
              <paramref name = "bytes" /> to the current stream.
            </param>
            <param name = "offset">
              The zero-based byte offset in <paramref name = "bytes" /> at which to begin copying bytes to the current
              stream.
            </param>
            <param name = "count">
              The number of bytes to be written to the current stream.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.Dispose(System.Boolean)">
            <summary>
              Release the unmanaged resources.
            </summary>
            <param name = "isDisposing">
              <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.ReadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name = "bytes">
              An array of bytes. When this method returns, the buffer contains the specified byte array with the values
              between offset and (offset + count - 1) replaced by the bytes read from the current source. 
            </param>
            <param name = "offset">
              The zero-based byte offset in buffer at which to begin storing the data read from the current stream.
            </param>
            <param name = "count">
              The maximum number of bytes to be read from the current stream. 
            </param>
            <returns>The total number of bytes read into the buffer</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Writes a sequence of bytes to the current stream and advances the current position within this stream by
              the number of bytes written.
            </summary>
            <param name = "bytes">
              An array of bytes. This method copies <paramref name = "count" /> bytes from 
              <paramref name = "bytes" /> to the current stream.
            </param>
            <param name = "offset">
              The zero-based byte offset in <paramref name = "bytes" /> at which to begin copying bytes to the current
              stream.
            </param>
            <param name = "count">
              The number of bytes to be written to the current stream.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.GuardAgainstClosedStream">
            <summary>
              Throws an <code>IOException</code> if the stream is closed.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.GuardAgainstWriteStream">
            <summary>
              Throws a <code>NotSupportedException</code> if the stream does not support writing.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.GuardAgainstReadStream">
            <summary>
              Throws a <code>NotSupportedException</code> if the stream does not support reading.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.GuardAgainstDisposed">
            <summary>
              Throws an <see cref="T:System.ObjectDisposedException"/> exception when the stream has already been disposed.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.Resize">
            <summary>
              Resizes the bytesToCopy to a larger size.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeStream.RemoveReadBytes">
            <summary>
              Removes the read bytes from the beginning of the stream.  This keeps
              the memory requirement down for the application.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeStream.CanRead">
            <summary>
              Gets a value indicating whether this stream supports reading.
            </summary>
            <returns>
              <c>true</c> if the stream supports reading; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              Thrown when the stream has been already disposed of.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeStream.CanSeek">
            <summary>
              Gets a value indicating whether this stream supports seeking.
            </summary>
            <value>
              <c>true</c> if the stream supports seeking; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
              Thrown when the stream has been already disposed of.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeStream.CanWrite">
            <summary>
              Gets a value indicating whether this stream supports writing.
            </summary>
            <returns>
              <c>true</c> if the stream supports writing; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              Thrown when the stream has been already disposed of.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeStream.Length">
            <summary>
              Always throws a <see cref="T:System.NotSupportedException"/> exception.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeStream.Position">
            <summary>
              Always throws a <see cref="T:System.NotSupportedException"/> exception.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeStream.IsClosed">
            <summary>
              Gets a value indicating whether this stream is closed.
            </summary>
            <value>
              <c>true</c> if the stream is closed;
              otherwise <c>false</c>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
              Thrown when the stream has been already disposed of.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeStream.CanBeginTransmittingAudio">
            <summary>
              Gets a value indicating whether this stream can begin transmitting audio.
            </summary>
            <value>
              <c>true</c> if this stream can begin transmitting audio; otherwise, <c>false</c>.
            </value>
            <exception cref = "T:System.ObjectDisposedException">
              Methods were called after the stream was closed or when the stream is disposed.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeStream.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.ILogger">
            <summary>
            Provides application logging.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Debug(System.String)">
            <summary>
            Logs a debug message.
            </summary>
            <param name="message">The debug message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Debug(System.Exception)">
            <summary>
            Logs a debug exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Logs a debug message and objects.
            </summary>
            <param name="message">The debug message.</param>
            <param name="args">The objects.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Debug(System.String,System.Exception)">
            <summary>
            Logs a debug message and an exception.
            </summary>
            <param name="message">The debug message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Info(System.String)">
            <summary>
            Logs an info message.
            </summary>
            <param name="message">The info message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Info(System.Exception)">
            <summary>
            Logs an info exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Info(System.String,System.Object[])">
            <summary>
            Logs an info message and objects.
            </summary>
            <param name="message">The info message.</param>
            <param name="args">The objects.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Info(System.String,System.Exception)">
            <summary>
            Logs an info message and exception.
            </summary>
            <param name="message">The info message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Warn(System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Warn(System.Exception)">
            <summary>
            Logs a warning exception.
            </summary>
            <param name="exception">The warning exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Warn(System.String,System.Object[])">
            <summary>
            Logs a warning message and objects.
            </summary>
            <param name="message">The warning message.</param>
            <param name="args">The objects.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Warn(System.String,System.Exception)">
            <summary>
            Logs a warning message and exception.
            </summary>
            <param name="message">The warning message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Error(System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Error(System.Exception)">
            <summary>
            Logs an error exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Error(System.String,System.Object[])">
            <summary>
            Logs an error message and objects.
            </summary>
            <param name="message">The error message.</param>
            <param name="args">The objects.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Error(System.String,System.Exception)">
            <summary>
            Logs an error message and exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Fatal(System.String)">
            <summary>
            Logs a fatal message.
            </summary>
            <param name="message">The fatal message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Fatal(System.Exception)">
            <summary>
            Logs a fatal exception.
            </summary>
            <param name="exception">The fatal exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            Logs a fatal message and objects.
            </summary>
            <param name="message">The fatal message.</param>
            <param name="args">The objects.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.ILogger.Fatal(System.String,System.Exception)">
            <summary>
            Logs a fatal message and exceptions.
            </summary>
            <param name="message">The fatal message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.Log4NetLogger">
            <summary>
            A Log4Net implementation.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.#ctor(System.Type)">
            <summary>
            Constructor that takes in the class type of
            the class you want to log events for.
            </summary>
            <param name="type">The class you want to log events for.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Debug(System.String)">
            <summary>
            Logs a debug message with the Log4Net logging system.
            </summary>
            <param name="message">The debug message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Debug(System.Exception)">
            <summary>
            Logs a debug exception with the Log4Net logging system.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Debug(System.String,System.Object[])">
            <summary>
            Logs a debug message and objects with the Log4Net logging system.
            </summary>
            <param name="message">The debug message.</param>
            <param name="args">The objects.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Debug(System.String,System.Exception)">
            <summary>
            Logs a debug message and exception with the Log4Net logging system.
            </summary>
            <param name="message">The debug message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Info(System.String)">
            <summary>
            Logs an info message with the Log4Net logging system.
            </summary>
            <param name="message">The info message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Info(System.Exception)">
            <summary>
            Logs an info exception with the Log4Net logging system.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Info(System.String,System.Object[])">
            <summary>
            Logs an info message and objects with the Log4Net logging system.
            </summary>
            <param name="message">The info message.</param>
            <param name="args">The objects.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Info(System.String,System.Exception)">
            <summary>
            Logs an info message and exception with the Log4Net logging system.
            </summary>
            <param name="message">The info message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Warn(System.String)">
            <summary>
            Logs a warning message with the Log4Net logging system.
            </summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Warn(System.Exception)">
            <summary>
            Logs a warning exception with the Log4Net logging system.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Warn(System.String,System.Object[])">
            <summary>
            Logs a warning message and objects with the Log4Net logging system.
            </summary>
            <param name="message">The warning message.</param>
            <param name="args">The objects.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Warn(System.String,System.Exception)">
            <summary>
            Logs a warning message and exception with the Log4Net logging system.
            </summary>
            <param name="message">The warning message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Error(System.String)">
            <summary>
            Logs an error message with the Log4Net logging system.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Error(System.Exception)">
            <summary>
            Logs an error exception with the Log4Net logging system.
            </summary>
            <param name="exception">The error message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Error(System.String,System.Object[])">
            <summary>
            Logs an error message and objects with the Log4Net logging system.
            </summary>
            <param name="message">The error message.</param>
            <param name="args">The objects.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Error(System.String,System.Exception)">
            <summary>
            Logs an error message and exception with the Log4Net logging system.
            </summary>
            <param name="message">The error message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Fatal(System.String)">
            <summary>
            Logs a fatal message with the Log4Net logging system.
            </summary>
            <param name="message">The fatal message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Fatal(System.Exception)">
            <summary>
            Logs a fatal exception with the Log4Net logging system.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Fatal(System.String,System.Object[])">
            <summary>
            Logs a fatal message and objects with the Log4Net logging system.
            </summary>
            <param name="message">The fatal message.</param>
            <param name="args">The objects.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Log4NetLogger.Fatal(System.String,System.Exception)">
            <summary>
            Logs a fatal message and exception with the Log4Net logging system.
            </summary>
            <param name="message">The fatal message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.NullLogger">
            <summary>
            Null logger used as a default logger. Does not 
            actually do any logging.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="type">The class you want to create a logger for.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Debug(System.String)">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="message">The debug message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Debug(System.Exception)">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Debug(System.String,System.Object[])">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="message">The debug message.</param>
            <param name="args">The objects.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Debug(System.String,System.Exception)">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="message">The debug message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Info(System.String)">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="message">The info message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Info(System.Exception)">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Info(System.String,System.Object[])">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="message">The info message.</param>
            <param name="args">The objects.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Info(System.String,System.Exception)">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="message">The info message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Warn(System.String)">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Warn(System.Exception)">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Warn(System.String,System.Object[])">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="message">The warning message.</param>
            <param name="args">The objects.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Warn(System.String,System.Exception)">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="message">The warning message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Error(System.String)">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Error(System.Exception)">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Error(System.String,System.Object[])">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="message">The error message.</param>
            <param name="args">The objects.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Error(System.String,System.Exception)">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="message">The error message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Fatal(System.String)">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="message">The fatal message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Fatal(System.Exception)">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Fatal(System.String,System.Object[])">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="message">The fatal message.</param>
            <param name="args">The objects.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.NullLogger.Fatal(System.String,System.Exception)">
            <summary>
            Empty implementation that logs nothing.  Used as a default logger when no logging is requested.
            </summary>
            <param name="message">The fatal message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.Stethoscope">
            <summary>
              Represents a 3M Bluetooth stethoscope
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.#ctor(MMM.HealthCare.Scopes.Device.IBluetoothDevice)">
            <summary>
              Initializes a new instance of the <see cref="T:MMM.HealthCare.Scopes.Device.Stethoscope"/> class.
            </summary>
            <param name="device">The Bluetooth device to connect to.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.Connect">
            <summary>
              Connects the computer to stethoscope using Bluetooth.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is already connected.
            </exception>
            <exception cref="!:PotentialCausesException">
              Occurs when the stethoscope could not be connected to.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.Disconnect">
            <summary>
              Disconnects the stethoscope from the computer.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.SetDisplay(System.String)">
            <summary>
              Sets the stethoscope's lower right display with a bitmap image.
            </summary>
            <param name="filePath">
              The file path to the bitmap image.
                    
             The bitmap image has to be 46 x 16.
            </param>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
            <exception cref="T:System.ArgumentException">
              Occurs when the stream is not a bitmap image or when the bitmap dimensions are not 46 x 16.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.SetDisplay(System.IO.Stream)">
            <summary>
              Sets the stethoscope's lower right display with a bitmap image.
            
              
            </summary>
            <param name="bitmapStream">
            A stream representing a bitmap image.
            
            The bitmap image has to be 46 x 16.
            </param>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
            Occurs when the stethoscope is not connected.
            </exception>
            <exception cref="T:System.ArgumentException">
              Occurs when the stream is not a bitmap image or when the bitmap dimensions are not 46 x 16.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.StartAudioInput">
            <summary>
              Starts streaming audio from the stethoscope to the computer.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
            <remarks>
              The default <see cref="T:MMM.HealthCare.Scopes.Device.AudioInputSwitch"/> when calling this method will be 
              <see cref="F:MMM.HealthCare.Scopes.Device.AudioInputSwitch.BeforeFilter"/>.
            </remarks>
            <example>
                IBluetoothManager _stethoscopeManager = ConfigurationFactory.GetBluetoothManager();
                IList<![CDATA[<Stethoscope>]]> stethoscopes = _stethoscopeManager.GetPairedDevices();
            
                Stethoscope scope = stethoscopes[0];
            
                try 
                { 
                    scope.Connect(); 
                } 
                catch (Exception exception) 
                { 
                    // Handle exception 
                }
            
                scope.StartAudioInput();
            
                byte[] bytesToCopy = new byte[128];
            
                try 
                { 
                    scope.InputAudioStream.Read(bytesToCopy, 0, bytesToCopy.Length); //process the data in bytesToCopy here. 
                } 
                catch (Exception exception) 
                {
                   //Handle exception. 
                }
            </example>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.StartAudioInput(MMM.HealthCare.Scopes.Device.AudioInputSwitch)">
            <summary>
              Starts streaming audio from the stethoscope to the computer.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
            <param name="filterType">
              The audio input switch.
            </param>
            <example>
              <code>
                IBluetoothManager _stethoscopeManager = ConfigurationFactory.GetBluetoothManager();
                IList<![CDATA[<Stethoscope>]]> stethoscopes = _stethoscopeManager.GetPairedDevices();
            
                Stethoscope scope = stethoscopes[0];
            
                try
                {
                    scope.Connect();
                }
                catch (Exception exception)
                {
                    // Handle exception
                }
            
                scope.StartAudioInput(AudioInputSwitch.BeforeFilter);
            
                byte[] bytesToCopy = new byte[128];
            
                try
                {
                    scope.InputAudioStream.Read(bytesToCopy, 0, bytesToCopy.Length);
                    // process the data in bytesToCopy here.
                }
                catch (Exception exception)
                {
                    // Handle exception.
                }
              </code>
            </example>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.StartAudioOutput">
            <summary>
              Starts streaming audio from the computer to stethoscope.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
            <remarks>
              The default <see cref="T:MMM.HealthCare.Scopes.Device.AudioOutputSwitch"/>
              when calling this method will be <see cref="F:MMM.HealthCare.Scopes.Device.AudioOutputSwitch.BeforeFilter"/>
             
              <p>
                The default <see cref="T:MMM.HealthCare.Scopes.Device.HeadsetAudioSource"/>
                when calling this method will be <see cref="F:MMM.HealthCare.Scopes.Device.HeadsetAudioSource.Computer"/>
              </p>
            </remarks>
            <example>
              <code>
                IBluetoothManager _stethoscopeManager = ConfigurationFactory.GetBluetoothManager();
                IList<![CDATA[<Stethoscope>]]> stethoscopes = _stethoscopeManager.GetPairedDevices();
             
                Stethoscope scope = stethoscopes[0];
            
                try 
                {
                    scope.Connect();
                } 
                catch (Exception exception) 
                {
                    // Handle Exception
                }
             
                scope.StartAudioOutput();
                
                byte[] bytesToCopy = new byte[128];
            
                // Populate the bytesToCopy from someplace here.
                try 
                {
                    // write the audio to the stethoscope. Note you need to send some audio to the
                    // stream before the stethoscope will begin to process the data.
                    scope.OutputAudioStream.Write(bytesToCopy, 0, bytesToCopy.Length);
                } 
                catch (Exception exception) 
                {
                    // Handle exception
                }
              </code>
            </example>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.StartAudioOutput(MMM.HealthCare.Scopes.Device.AudioOutputSwitch,MMM.HealthCare.Scopes.Device.HeadsetAudioSource)">
            <summary>
              Starts streaming audio from the computer to stethoscope.
            </summary>
            <remarks>
              When using AudioOutputSwitch.AfterFilter make sure to specify the audio filter
              frequency to your users in your user manual. 
            </remarks>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
            <param name="filterType">
              The Audio Output Switch
            </param>
            <param name="selectorMode">
              The Audio Output Mode
            </param>
            <example>
              <code>
                IBluetoothManager _stethoscopeManager = ConfigurationFactory.GetBluetoothManager();
                IList<![CDATA[<Stethoscope>]]> stethoscopes = _stethoscopeManager.GetPairedDevices();
            
                Stethoscope scope = stethoscopes[0];
            
                try 
                {
                scope.Connect();
                } 
                catch (Exception exception) 
                {
                // Handle Exception
                }
            
                scope.StartAudioOutput(AudioOutputSwitch.BeforeFilter, AudioOutputMode.AudioStream);
              
                byte[] bytesToCopy = new byte[128];
              
                // Populate the bytesToCopy from someplace here.
                try 
                {
                // write the audio to the stethoscope. Note you need to send some audio to the
                // stream before the stethoscope will begin to process the data.
                scope.OutputAudioStream.Write(bytesToCopy, 0, bytesToCopy.Length);
                } 
                catch (Exception exception) 
                {
                // Handle exception
                }
              </code>
            </example>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.StopAudioInput">
            <summary>
              Stops streaming audio from the stethoscope to the PC.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.StopAudioOutput">
            <summary>
              Stops streaming audio from the PC to the stethoscope.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.StopAudioInputAndOutput">
            <summary>
              Stops streaming audio from the computer to stethoscope or from the
              stethoscope to computer.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.StartUploadTrack">
            <summary>
              Sends local audio to the stethoscope for storage. The stethoscope can only hold about 29 seconds worth of audio.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected or when the track is locked.
            </exception>
            <remarks>
              This method will permanently overwrite any existing audio on the track. Please make sure this is what the user desires before 
              calling this method.  
             
              Works with all stethoscope firmware versions. If using a stethoscope with multiple tracks, it will default
              to track 0 with audio type of body.
             
              You must call <see cref="M:MMM.HealthCare.Scopes.Device.Stethoscope.StopUploadAndDownloadTrack"/> or <see cref="M:MMM.HealthCare.Scopes.Device.Stethoscope.StopUploadAndDownloadTrack"/>
              when done sending audio to the stethoscope's internal bytesToCopy otherwise the data  still in the
              stethoscope's bytesToCopy but not yet processed will be thrown away  and not recorded to memory.
            </remarks>
            <example>
              <code>
                IBluetoothManager _stethoscopeManager = ConfigurationFactory.GetBluetoothManager();
                IList<![CDATA[<Stethoscope>]]> stethoscopes = _stethoscopeManager.GetPairedDevices();
            
                Stethoscope scope = stethoscopes[0];
              
                try 
                {
                scope.Connect();
                } 
                catch (Exception exception) 
                {
                // Handle Exception
                }
              
                scope.StartUploadTrack();
              
                byte[] bytesToCopy = new byte[128];
              
                // Populate the bytesToCopy from someplace here.
                try 
                {
                // write the audio to the stethoscope. You need to send some audio to the
                // stream before the stethoscope will begin to process the data.
                scope.OutputAudioStream.Write(bytesToCopy, 0, bytesToCopy.Length);
                } 
                catch (Exception exception) 
                {
                // Handle Exception
                }
              </code>
            </example>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.StartUploadTrack(System.Int32,MMM.HealthCare.Scopes.Device.AudioType)">
            <summary>
              Sends local audio to the stethoscope for storage. The stethoscope can only hold about 29 seconds worth of
              audio.
            </summary>
            <param name="trackIndex">
              The stethoscope track to upload audio to.
            </param>
            <param name="audioType">
              The type of audio to upload. (e.g. Body or VoiceComment).
            </param>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected, the audio track is locked or the stethoscope's firmware
              version does not support this method. (Ex: Firmware Version = 2.0).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Occurs when the track index is not between 0 and 11.
            </exception>
            <remarks>
              This method will permanently overwrite any existing audio on the track. Please make sure this is what the user desires before 
              calling this method.  
             
              Only works with stethoscopes that have multiple tracks. (Firmware Version 3.0 and greater)
                 
              You must call <see cref="M:MMM.HealthCare.Scopes.Device.Stethoscope.StopUploadAndDownloadTrack"/> when done sending audio to the stethoscope's
              internal bytesToCopy otherwise the data still in the stethoscope's bytesToCopy but not yet processed will
              be thrown away and not recorded to memory.
            </remarks>
            <example>
              <code>
                IBluetoothManager _stethoscopeManager = ConfigurationFactory.GetBluetoothManager();
                IList<![CDATA[<Stethoscope>]]> stethoscopes = _stethoscopeManager.GetPairedDevices();
            
                Stethoscope scope = stethoscopes[0];
             
                try 
                {
                scope.Connect();
                } 
                catch (Exception exception) 
                {
                // Handle exception
                }
             
                scope.StartUploadTrack(4, AudioType.Body);
             
                byte[] bytesToCopy = new byte[128];
             
                // Populate the bytesToCopy from someplace here.
                try 
                {
                // write the audio to the stethoscope. Note you need to send some audio to the
                // stream before the stethoscope will begin to process the data.
                scope.OutputAudioStream.Write(bytesToCopy, 0, bytesToCopy.Length);
                } 
                catch (Exception exception) 
                {
                // Handle exception
                }
              </code>
            </example>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.StartDownloadTrack">
            <summary>
              Retrieves audio stored in memory from the stethoscope.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
            <remarks>
              Works will all stethoscope firmware versions. If using a stethoscope with multiple tracks, it will default
              to track 0 with audio type of body.
            </remarks>
            <example>
              <code>
                IBluetoothManager _stethoscopeManager = ConfigurationFactory.GetBluetoothManager();
                IList<![CDATA[<Stethoscope>]]> stethoscopes = _stethoscopeManager.GetPairedDevices();
            
                Stethoscope scope = stethoscopes[0];
              
                try 
                {
                scope.Connect();
                } 
                catch (Exception exception) 
                {
                // Handle exception.
                }
              
                scope.StartDownloadTrack();
              
                byte[] bytesToCopy = new byte[128];
              
                try 
                {
                scope.OutputAudioStream.Read(bytesToCopy, 0, bytesToCopy.Length);
                // process the data in bytesToCopy here.
                } 
                catch (Exception exception) 
                {
                // Handle Exception.
                }
              </code>
            </example>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.StartDownloadTrack(System.Int32,MMM.HealthCare.Scopes.Device.AudioType)">
            <summary>
              Retrieves audio stored in memory from the stethoscope.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected or the stethoscope's firmware version does not support this
              method. (Ex: Firmware Version = 2.0)
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Occurs when the track index is not between 0 and 11.
            </exception>
            <remarks>
              Only works with stethoscopes that have multiple tracks. (Firmware Version 3.0 and greater)
            </remarks>
            <param name="trackIndex">
              The track on the stethoscope you want to download audio from.
            </param>
            <param name="audioType">
              The type of audio downloaded from the stethoscope.
            </param>
            <example>
              <code>
                IBluetoothManager _stethoscopeManager = ConfigurationFactory.GetBluetoothManager();
                IList<![CDATA[<Stethoscope>]]> stethoscopes = _stethoscopeManager.GetPairedDevices();
            
                Stethoscope scope = stethoscopes[0];
             
                try 
                {
                scope.Connect();
                } 
                catch (Exception exception) 
                {
                // Handle exception
                }
             
                scope.StartDownloadTrack(4, AudioType.Body);
             
                byte[] bytesToCopy = new byte[128];
             
                try 
                {
                scope.OutputAudioStream.Read(bytesToCopy, 0, bytesToCopy.Length);
                // process the data in bytesToCopy here.
                } 
                catch (Exception exception) 
                {
                // Handle exception
                }
              </code>
            </example>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.StopUploadTrack">
            <summary>
              Stops uploading audio to the stethoscope from the PC.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.StopDownloadTrack">
            <summary>
              Stops downloading audio from the stethoscope to the PC.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.StopUploadAndDownloadTrack">
            <summary>
              Stops uploading or downloading audio from the stethoscope.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.ToString">
            <summary>
              Gets the string representation of this object.
            </summary>
            <returns>The string representation of the <code>Stethoscope</code> class.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.Dispose">
            <summary>
              Releases unmanaged resources.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.KeepAliveTimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
              Occurs when the keep alive timer elapses.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.SendCommand(MMM.HealthCare.Scopes.Device.ISendCommand)">
            <summary>
              Asynchronously sends a command to the stethoscope.
            </summary>
            <param name = "toSend">The command to send.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.SendCommandSynchronously(MMM.HealthCare.Scopes.Device.ISendCommand)">
            <summary>
              Synchronously sends the command to the stethoscope.
            </summary>
            <param name = "toSend">The command to send.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.SendCommandSynchronously(MMM.HealthCare.Scopes.Device.ISendCommand,System.Int32)">
            <summary>
              Synchronously sends the command to the stethoscope.
            </summary>
            <param name = "toSend">The command to send.</param>
            <param name="timeout">The timeout to use on the synchronous command.  0 disables the timeout.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.FlushAudioCommands">
            <summary>
              Flush any audio commands currently queued up on the send thread.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.ClearAudioCommands">
            <summary>
              Clear any audio commands currently queued up on the send thread.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.OnMButtonClick(System.Boolean)">
            <summary>
              Raises the M button click event.
            </summary>
            <param name = "isLongButtonClick">
              <c>true</c> if the button click is long; otherwise, <c>false</c>.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.OnMButtonRelease">
            <summary>
              Raises the M button released event.
            </summary>
            <remarks>
              This event is only raised with stethoscopes that have a firmware version
              of 3.0 or higher.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.OnPlusButtonClick(System.Boolean)">
            <summary>
              Raises the plus button click event.
            </summary>
            <param name = "isLongButtonClick">
              <c>true</c> if the button click is long; otherwise, <c>false</c>.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.ThreadedOnPlusButtonClick(System.Object)">
            <summary>
              Raises the plus button click event on another thread.
            </summary>
            <param name = "state">
              The state of the button click. 
              <c>true</c> if the button click is long; otherwise, <c>false</c>. 
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.OnPlusButtonRelease">
            <summary>
              Raises the plus button release event.
            </summary>
            <remarks>
              This event is only raised with stethoscopes that have a firmware version  of 3.0 or higher.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.OnMinusButtonClick(System.Boolean)">
            <summary>
              Raises the minus button click event.
            </summary>
            <param name = "isLongButtonClick">
              <c>true</c> if the button click is long; otherwise,<c>false</c>
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.ThreadedOnMinusButtonClick(System.Object)">
            <summary>
              Raises the minus button click event on another thread.
            </summary>
            <param name = "status">
              The state of the button click. 
              <c>true</c> if the button click is long; otherwise, <c>false</c>. 
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.OnMinusButtonRelease">
            <summary>
              Raises the minus button release event.
            </summary>
            <remarks>
              This event is only raised with stethoscopes that have a firmware version
              of 3.0 or higher.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.OnFilterButtonClick(System.Boolean)">
            <summary>
              Raises the filter button click event.
            </summary>
            <param name = "isLongButtonClick">
              <c>true</c> if the button click is long; otherwise, <c>false</c>
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.ThreadedOnFilterButtonClick(System.Object)">
            <summary>
              Raises the filter button click event on another thread.
            </summary>
            <param name = "status">The status.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.OnFilterButtonRelease">
            <summary>
              Raises the filter button release event.
            </summary>
            <remarks>
              This event is only raised with stethoscopes that have a firmware version of 3.0 or higher.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.OnOnAndOffButtonClick(System.Boolean)">
            <summary>
              Raises the on <![CDATA[&]]> off button click event.
            </summary>
            <param name = "isLongButtonClick">
              <c>true</c> if the button click is long; otherwise, <c>false</c>.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.OnOnAndOffButtonRelease">
            <summary>
              Raises the on/off button release event.
            </summary>
            <remarks>
              This event is only raised with stethoscopes that have a firmware version of 3.0 or higher.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.OnError(MMM.HealthCare.Scopes.Device.Errors,System.String)">
            <summary>
              Raises the error event.
            </summary>
            <param name = "error">The error that occurred.</param>
            <param name = "message">The error message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.OnUnderrunOrOverrun(System.Boolean)">
            <summary>
              Raises the underrun or overrun event.
            </summary>
            <param name = "isUnderrun">
              <c>true</c> if underrrun; otherwise, <c>false</c> if overrun.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.OnEndOfOutputStream">
            <summary>
              Raises the end of output stream event.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.OnEndOfInputStream">
            <summary>
              Raises the end of input stream event.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.ThreadedOnEndOfInputStream(System.Object)">
            <summary>
              Raises the end of input stream event on another thread.
            </summary>
            <param name = "state">The state.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.OnLowBatteryLevel">
            <summary>
              Raises the low battery level event.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.ThreadedOnLowBatteryLevel(System.Object)">
            <summary>
              Raises the low battery level event on another thread.
            </summary>
            <param name = "state">The state.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.OnOutOfRange">
            <summary>
              Raises the is out of range event.
            </summary>
            <remarks>
              Occurs when a ping packet is not responded to in time.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.UpdateStethoscopeTracks">
            <summary>
              Updates the stethoscope tracks properties.
            </summary>
            <remarks>
              Only applies to firmware 3.0 and greater stethoscopes.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.AudioBlocksRequested(System.Int32,System.Int32)">
            <summary>
              The stethoscope is requesting more audio packets. Function queues up more
              packets to be sent.
            </summary>
            <param name = "numberOfPacketsRequested">The number of packets requested.</param>
            <param name = "spaceInBuffer">The free space in the stethoscope's bytesToCopy.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.GuardAgainstNotConnected">
            <summary>
              Guards methods and properties from being access when not connected.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.GuardAgainstFirmwareVersion">
            <summary>
              Guards methods and properties from being accessed when the firmware
              version does not support the methods or properties.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.GuardAgainstTrackLock(System.Int32)">
            <summary>
              Throws a exception if the track is locked.
            </summary>
            <param name="trackIndex">The track index.</param>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">Occurs when the track is locked.</exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.StartThreads">
            <summary>
              Start the receive, send and keep alive threads.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.StopThreads">
            <summary>
              Stops the send, receive, and keep alive threads.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.AddReceiveCommand(MMM.HealthCare.Scopes.Device.IReceiveCommand)">
            <summary>
              Adds a receive command to listen for from the
              stethoscope.
            </summary>
            <param name = "command">
              The receive command to add.
            </param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.AddRecieveCommands">
            <summary>
              Adds the commands the recieve thread uses to handle.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.SendStartupCommands">
            <summary>
              Send all the messages we need to get scope communication wired up.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.HandleAndRethrowConnectionException(System.Exception)">
            <summary>
              Handles and rethrows connection exception.
            </summary>
            <param name = "caughtException">The exception.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.CompareTo(System.Object)">
            <summary>
            Compare this object to another object of the same type.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>0 if the objects are the same.  Otherwise -1 or 1.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Stethoscope.CompareTo(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Compare this stethoscope with another stethoscope.
            </summary>
            <param name="otherStethoscope">The other stethoscope to compare.</param>
            <returns>0 if the objects are the same.  Otherwise -1 or 1 is returned.</returns>
        </member>
        <member name="E:MMM.HealthCare.Scopes.Device.Stethoscope.MButtonDown">
            <summary>
              Occurs when the M button is clicked on the stethoscope.
            </summary>
            <remarks>
              A normal M button event will always be raised before the long M button click.
            </remarks>
        </member>
        <member name="E:MMM.HealthCare.Scopes.Device.Stethoscope.MButtonUp">
            <summary>
              Occurs when the M button is released on the stethoscope.
            </summary>
            <remarks>
              This event is only raised on stethoscopes with a firmware version
              of 3.0 or greater.
            </remarks>
        </member>
        <member name="E:MMM.HealthCare.Scopes.Device.Stethoscope.PlusButtonDown">
            <summary>
              Occurs when the plus button is clicked on the stethoscope.
            </summary>
        </member>
        <member name="E:MMM.HealthCare.Scopes.Device.Stethoscope.PlusButtonUp">
            <summary>
              Occurs when the plus button is released on the stethoscope.
            </summary>
            <remarks>
              This event is only raised on stethoscopes with a firmware version
              of 3.0 or greater.
            </remarks>
        </member>
        <member name="E:MMM.HealthCare.Scopes.Device.Stethoscope.MinusButtonDown">
            <summary>
              Occurs when the minus button is clicked on the stethoscope.
            </summary>
        </member>
        <member name="E:MMM.HealthCare.Scopes.Device.Stethoscope.MinusButtonUp">
            <summary>
              Occurs when the minus button is released on the stethoscope.
            </summary>
            <remarks>
              This event is only raised on stethoscopes with a firmware version
              of 3.0 or greater.
            </remarks>
        </member>
        <member name="E:MMM.HealthCare.Scopes.Device.Stethoscope.FilterButtonDown">
            <summary>
              Occurs when the filter button is clicked on the stethoscope.
            </summary>
        </member>
        <member name="E:MMM.HealthCare.Scopes.Device.Stethoscope.FilterButtonUp">
            <summary>
              Occurs when the filter button is released on the stethoscope.
            </summary>
            <remarks>
              This event is only raised on stethoscopes with a firmware version
              of 3.0 or greater.
            </remarks>
        </member>
        <member name="E:MMM.HealthCare.Scopes.Device.Stethoscope.OnAndOffButtonDown">
            <summary>
              Occurs when the on and off button is clicked on the stethoscope.
            </summary>
        </member>
        <member name="E:MMM.HealthCare.Scopes.Device.Stethoscope.OnAndOffButtonUp">
            <summary>
              Occurs when the on and off button is released on the stethoscope.
            </summary>
            <remarks>
              This event is only raised on stethoscopes with a firmware version
              of 3.0 or greater.
            </remarks>
        </member>
        <member name="E:MMM.HealthCare.Scopes.Device.Stethoscope.Error">
            <summary>
              Occurs when an error is returned from the stethoscope.
            </summary>
        </member>
        <member name="E:MMM.HealthCare.Scopes.Device.Stethoscope.LowBatteryLevel">
            <summary>
              Occurs when the battery level is low on the stethoscope.
            </summary>
        </member>
        <member name="E:MMM.HealthCare.Scopes.Device.Stethoscope.Disconnected">
            <summary>
              Occurs when the stethoscope is disconnected.
            </summary>
        </member>
        <member name="E:MMM.HealthCare.Scopes.Device.Stethoscope.EndOfOutputStream">
            <summary>
              Occurs when the end of the output stream to the stethoscope has been reached.
            </summary>
        </member>
        <member name="E:MMM.HealthCare.Scopes.Device.Stethoscope.EndOfInputStream">
            <summary>
              Occurs when the input stream has reached the end or when downloading
              audio from a stethoscope track has completed.
            </summary>
        </member>
        <member name="E:MMM.HealthCare.Scopes.Device.Stethoscope.UnderrunOrOverrun">
            <summary>
              Occurs when the stethoscope loses audio packets because of an underrun or
              overrun error.
            </summary>
        </member>
        <member name="E:MMM.HealthCare.Scopes.Device.Stethoscope.OutOfRange">
            <summary>
              Occurs when the stethoscope goes out of range or comes back into range.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.IsConnected">
            <summary>
              Gets a value indicating whether the stethoscope is connected.
            </summary>
            <value>
              <c>true</c> if the stethoscope connected; <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.SerialNumber">
            <summary>
              Gets the serial number from the stethoscope.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.Name">
            <summary>
              Gets the Bluetooth device name.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.FirmwareVersion">
            <summary>
              Gets the current firmware version of the connected stethoscope.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.ModelNumber">
            <summary>
              Gets the stethoscope's model number. (e.g. M3200)
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.BatteryLevel">
            <summary>
              Gets the stethoscope's battery level.
            </summary>
            <value>
              Values will be between 0 and 3.
            
              3 = Battery level between 50% and 100%. 
              2 = Battery level between 25% and 50%. 
              1 = Battery level between 10% and 25%. 
              0 = Battery level below 10%.
            </value>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.IsAutoBluetoothOn">
            <summary>
              Gets the automatic Bluetooth connect setting.
            </summary>
            <value>
              <c>true</c> if the stethoscope automatically attempts to
              connect to the computer when turned on; <c>false</c> otherwise.
            </value>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.SleepTimeoutMinutes">
            <summary>
              Gets or sets the sleep timeout. The sleep timer starts when the stethoscope enters 
              standby. When the sleep timeout expires, the stethoscope turns off.
            </summary>
            <value>
              The sleep timeout is limited between 0 and 1440 minutes. If 0, the sleeper timer is 
              disabled.
            </value>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Occurs when the value is out of range.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.ActiveTimeoutDeciseconds">
            <summary>
              Gets or sets the active timeout. The active timer is reset when any key on the stethoscope is
              pressed. When the active timeout expires, the stethoscope enters standby.  Standby is when 
              the Littmann icon is displayed on the stethoscope screen. The active timer is ignored when 
              another device is connected to the stethoscope using Bluetooth.
            </summary>
            <value>
              The active timeout is limited between 0 and 18000 second tenths. 
              If 0, the active timer is disabled.
            </value>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Occurs when the value is out of range.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.BacklightTimeoutDeciseconds">
            <summary>
              Gets or sets the backlight timeout. The backlight timer is started when any key on the stethoscope 
              is pressed. When the backlight timeout expires, the stethoscope backlight turns off.
            </summary>
            <value>
              The backlight timeout is limited between 0 and 100 second tenths. If 0, the backlight timer has 
              no timeout.
            </value>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Occurs when the value is out of range.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.BluetoothTimeoutDeciseconds">
            <summary>
              Gets or sets the Bluetooth timeout. The Bluetooth timer is reset when the stethoscope sends or receives a
              packet. If the Bluetooth timer expires the connection is terminated.
            </summary>
            <remarks>
              The connection between computer and stethoscope is never terminated because of this setting. There is a
              internal ping timer which maintains the connection.
            </remarks>
            <value>
              The Bluetooth timeout is limited to values between 20 and 18000 tenths of a second.
            </value>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Occurs when the value is out of range.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.AutomaticOffTimeoutDeciseconds">
            <summary>
              Gets or sets the automatic off timeout.
            </summary>
            <value>
              The automatic off timeout is limited between 0 and 1800 1/10 of a second. If 0, the automatic off 
              timer has no timeout.
            </value>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Occurs when the value is out of range.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.BluetoothPairTimeoutDeciseconds">
            <summary>
              Gets or sets the Bluetooth pair timeout. The Bluetooth pair timer is started when the user enter the pairing 
              on stethoscope. If the Bluetooth pair timer expires the pairing is terminated and stethoscope enters the 
              active state.
            </summary>
            <value>
              The Bluetooth pair timeout is limited between 20 and 1800 tenths of a second or 0. 
              If the value is 0, then the Bluetooth pair timer has no timeout.
            </value>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Occurs when the value is out of range.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.StartUpSoundAmplificationLevel">
            <summary>
              Gets the stethoscope's start up sound amplification level.
            </summary>
            <value>Ranges from 0 to 8.</value>
            <remarks>
              The sound amplification is amplified in increments of 3. For example, 0 is equal to 0X amplification and
              8 is equal to 24X amplification.
            </remarks>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.SoundAmplificationLevel">
            <summary>
              Gets or sets the sound amplification level.
            </summary>
            <value>Ranges from 0 to 8.</value>
            <remarks>
              The sound amplification is amplified in increments of 3. For example, 0 is equal to 0X amplification and
              8 is equal to 24X amplification.
            </remarks>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Occurs when the value is out of range.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.StartUpFilter">
            <summary>
              Gets the stethoscope's default <see cref="P:MMM.HealthCare.Scopes.Device.Stethoscope.Filter"/> value when the stethoscope is turned on.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.Filter">
            <summary>
              Gets or sets the <see cref="P:MMM.HealthCare.Scopes.Device.Stethoscope.Filter"/>. (e.g. Bell, Diaphragm)
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.StartUpGainStep">
            <summary>
              Gets the stethoscope's default gain step when the stethoscope is turned
              on. This is the default value used for the before, after, and raw
              <see cref="T:MMM.HealthCare.Scopes.Device.AudioInputSwitch"/>
            </summary>
            <value>
              <p>
              Ranges from 0 to 22.
              </p>
             
              0 = -45.0 dB <br/>
              1 = -41.5 dB <br/> 
              2 = -39.0 dB <br/>
              3 = -35.5 dB <br/>
              4 = -33.0 dB <br/>
              5 = -29.5 dB <br/>
              6 = -27.0 dB <br/>
              7 = -23.5 dB <br/>
              8 = -21.0 dB <br/>
              9 = -18.0 dB <br/>
              10 = -15.0 dB <br/>
              11 = -12.0 dB <br/>
              12 = -9.0 dB <br/>
              13 = -6.0 dB <br/>
              14 = -3.0 dB <br/>
              15 = 0.0 dB <br/>
              16 = 3.5 dB <br/>
              17 = 6.0 dB <br/>
              18 = 9.5 dB <br/>
              19 = 12.0 dB <br/>
              20 = 15.5 dB <br/>
              21 = 18.0 dB <br/>
              22 = 21.5 dB <br/>
            
            </value>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.FineGain">
            <summary>
              The factory calibrated value for the before and after filters. Fine gain
              is interpreted as a factor between -1 and 0.999969. The correlation on
              Channel A is fine gain / 32768.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.RawOutputGainStep">
            <summary>
              The gain step for the raw output channel (channel B).
            </summary>
            <value>
              <p>
              Values range from 0 to 22.
              </p>
            
              0 = -45.0 dB <br/>
              1 = -41.5 dB <br/>
              2 = -39.0 dB <br/>
              3 = -35.5 dB <br/>
              4 = -33.0 dB <br/>
              5 = -29.5 dB <br/>
              6 = -27.0 dB <br/>
              7 = -23.5 dB <br/>
              8 = -21.0 dB <br/>
              9 = -18.0 dB <br/>
              10 = -15.0 dB <br/>
              11 = -12.0 dB <br/>
              12 = -9.0 dB <br/>
              13 = -6.0 dB <br/>
              14 = -3.0 dB <br/>
              15 = 0.0 dB <br/>
              16 = 3.5 dB <br/>
              17 = 6.0 dB <br/>
              18 = 9.5 dB <br/>
              19 = 12.0 dB <br/>
              20 = 15.5 dB <br/>
              21 = 18.0 dB <br/>
              22 = 21.5 dB <br/>
            </value>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Occurs when the gain step is not between 0 and 22.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.Display">
            <summary>
              Sets the stethoscopes lower right display.
            </summary>
            <remarks>
             Be careful not to display misleading filters, heart rate numbers 
             or company images. 
            </remarks>
            <value>Bitmap is required to be 46 x 16.</value>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
            <exception cref="T:System.FormatException">
              The bitmap does not have the correct dimensions.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.BuiltInDisplay">
            <summary>
              Sets the stethoscope's display with a built-in image.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.IsMButtonEnabled">
            <summary>
              Gets or sets a value indicating whether the stethoscope's M button is enabled.
            </summary>
            <value>
              <c>true</c> if the stethoscope's M button is enabled; otherwise, <c>false</c>.
            </value>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.IsFilterButtonEnabled">
            <summary>
              Gets or sets a value indicating whether the stethoscope's filter button is enabled.
            </summary>
            <value>
              <c>true</c> if the stethoscope's filter button is enabled; otherwise, <c>false</c>.
            </value>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.IsPlusAndMinusButtonsEnabled">
            <summary>
              Gets or sets a value indicating whether the stethoscope's plus and minus buttons are enabled.
            </summary>
            <value>
              <c>true</c> if the stethoscope's plus and minus buttons are enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.TotalBytesRead">
            <summary>
              Gets the total bytes read from the stethoscope in this session.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.BytesReadPerSecond">
            <summary>
              Gets the total number of bytes read from the stethoscope in the last second.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.TotalBytesWritten">
            <summary>
              Gets the total bytes written to the stethoscope in this session.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.BytesWrittenPerSecond">
            <summary>
              Gets the total number of bytes written to the stethoscope in the last second.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.AudioInputStream">
            <summary>
              Gets the input stream that reads audio from stethoscope to computer.
            </summary>
            <remarks>
              Audio from the stethoscope is 16 bit PCM at 4000 sample per second.
              
              When <see cref="M:MMM.HealthCare.Scopes.Device.Stethoscope.StartAudioInput"/> or <see cref="M:MMM.HealthCare.Scopes.Device.Stethoscope.StartDownloadTrack"/> is called the 
              <see cref="P:MMM.HealthCare.Scopes.Device.Stethoscope.AudioInputStream"/> is cleared.
            </remarks>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.AudioOutputStream">
            <summary>
              Gets the output stream that writes audio from computer to stethoscope.
            </summary>
            <remarks>
              See <code>setIsULawEncoded</code> property audio format.
              
              When any stop method is called the <see cref="P:MMM.HealthCare.Scopes.Device.Stethoscope.AudioOutputStream"/> is cleared.
            </remarks>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.StethoscopeTracks">
            <summary>
              Gets the stethoscope  audio tracks.
            </summary>
            <remarks>
              The stethoscope tracks only work on stethoscope's with firmware version 3.0 or greater.
            </remarks>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected or the stethoscope's firmware version does not support this
              method. (Ex: Firmware Version = 2.0)
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.Stethoscope.IsULawEncoded">
            <summary>
              Gets or sets if the Audio stream is u-Law encoded.
            </summary>
            <value>
              <c>true</c> if the AudioInputStream is mu-law encoded at  8000 8 bit samples per second, otherwise 
              <c>false</c> if the  AudioInputStream is 16 bit PCM encoded at 4000 sample per second.
            </value>
            <remarks> 
               ULaw encoding only applies to streaming audio from the computer to the stethoscope.  It does not apply to
               uploading, downloading or streaming audio from the stethoscope to the computer.
            </remarks>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the stethoscope is not connected or if the computer is  streaming audio to the stethoscope.
            </exception>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.E3kReplyDeviceInfoRecordType">
            <summary>
              A command recieved from the stethoscope with the device's information.
            </summary>
            <remarks>
              This class corresponds to the E3K_REPLY_DEVICE_INFO_RECORD_TYPE record in Bluetooth SPP Protocol Record
              Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.E3kReplyDeviceInfoRecordType.DeserializePayload(MMM.HealthCare.Scopes.Device.Stethoscope,System.Byte[])">
            <summary>
              Deserializes a packet byte payload from the stethoscope.
            </summary>
            <param name = "stethoscope">The stethoscope to deserialize for.</param>
            <param name = "payload">The packet byte payload.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kReplyDeviceInfoRecordType.CommandByte">
            <summary>
              Gets the packet command byte.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.E3kReplyNackRecordType">
            <summary>
              A command received from the stethoscope when a bad command has been sent.
            </summary>
            <remarks>
              Is a E3K_REPLY_NACK_RECORD_TYPE record in the Bluetooth SPP Protocol  Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.E3kReplyNackRecordType.DeserializePayload(MMM.HealthCare.Scopes.Device.Stethoscope,System.Byte[])">
            <summary>
              Deserializes a packet byte payload from the stethoscope.
            </summary>
            <param name = "stethoscope">The stethoscope to deserialize for.</param>
            <param name = "payload">The packet byte payload.</param>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.E3kReplyNackRecordType.CommandByte">
            <summary>
              Gets the packet command byte.
            </summary>
            <value></value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcRequestDeviceInfoRecordType">
            <summary>
            A command sent to the stethoscope requesting the device's information.
            </summary>
            <remarks>
            Is a PC_REQUEST_DEVICE_INFO_RECORD_TYPE record in the Bluetooth SPP Protocol
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcRequestDeviceInfoRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcRequestDeviceInfoRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcRequestDeviceInfoRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PcRequestErrorInfoRecordType">
            <summary>
            A command sent to stethoscope requesting device's error information.
            </summary>
            <remarks>
            Is a PC_REQUEST_ERROR_INFO_RECORD_TYPE record in the Bluetooth SPP Protocol 
            Record Specification document.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PcRequestErrorInfoRecordType.SerializePayload(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Generates a packet byte payload for a stethoscope command.
            </summary>
            <param name="stethoscope">The stethoscope to generate the command for.</param>
            <returns>The packet byte payload.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcRequestErrorInfoRecordType.CommandByte">
            <summary>
            Gets the packet command byte.
            </summary>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.PcRequestErrorInfoRecordType.ResponseCommands">
            <summary>
            Gets the receive command classes that respond to this send command.
            </summary>
            <value>The receive command classes for this send command.</value>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.CyclicRedundancyCheckGenerator">
            <summary>
            Generates two byte cyclic redundancy check for stethoscope packets.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.CyclicRedundancyCheckGenerator.Generate(System.Byte[])">
            <summary>
            Generates a cyclic redundancy check code from a byte array.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.Constants">
            <summary>
            Constants.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Constants.KeepAliveTimerFrequency">
            <summary>
            The amount of time in milliseconds between executions of the keep alive timer.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Constants.SynchronousTimeoutMilliseconds">
            <summary>
            The timeout to use when sending synchronous commands that need a maximum timeout.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Constants.MinimumPacketsToBeginAudioTransmitting">
            <summary>
            This is the minumum number of packets we must send to the scope before it will start playing audio.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Constants.NumberOfAudioPacketsToSendAtATime">
            <summary>
            This is the number of packets that we want the scope to request at a time when we are transmitting
            audio from the PC to the scope.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Constants.ScopeFirmwareVersion2">
            <summary>
            Firmware version number for a scope with version 2 firmware.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Constants.ScopeFirmwareVersion3">
            <summary>
            Firmware version number for a scope with version 3 firmware.
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Constants.UnitOfWorkOptimizedPacketCountFirmwareVersion2">
            <summary>
            Number of packets to bulk together when streaming audio to a firmware
            version 2.0 stethoscope. (Non EDR)
            </summary>
        </member>
        <member name="F:MMM.HealthCare.Scopes.Device.Constants.UnitOfWorkOptimizedPacketCountFirmwareVersion3">
            <summary>
            Number of packets to bulk together when streaming audio to a firmware
            version 3.0 stethoscope (EDR)
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.PacketValidator">
            <summary>
            Validates packets from a stethoscope.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PacketValidator.IsValidPacket(System.Byte[])">
            <summary>
            Determines whether the packet is valid.
            </summary>
            <param name="packet">The packet to validate</param>
            <returns>
            	<c>true</c> if the packet is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PacketValidator.HasMinimumLength(System.Byte[])">
            <summary>
            Determines whether the packet has minimum length.
            </summary>
            <param name="packet">The packet to check for minimum length</param>
            <returns>
            	<c>true</c> if the packet has minimum length; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PacketValidator.IsHeaderValid(System.Byte[])">
            <summary>
            Determines whether or not the packet header is valid.
            </summary>
            <param name="packet">The packet to check the header on.</param>
            <returns>
            	<c>true</c> if the packet header is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PacketValidator.IsDummyFooterValid(System.Byte[])">
            <summary>
            Determines whether or not the packet dummy bytes on the footer are valid.
            </summary>
            <param name="packet">The packet to check the footer on.</param>
            <returns>
            	<c>true</c> if the packet dummy bytes on the footer are valid ; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PacketValidator.IsCyclicRedundancyCheckValid(System.Byte[])">
            <summary>
            Determines whether or not the packet cyclicRedundancyCheck is valid.
            </summary>
            <param name="packet">The packet to check the CRC on.</param>
            <returns>
            	<c>true</c> if the packet cyclic redundancy check is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PacketValidator.IsSequenceNumberValid(System.Byte[])">
            <summary>
            Determines whether the packet sequence number is valid.
            </summary>
            <param name="packet">The packet to check the sequence number on.</param>
            <returns>
            	<c>true</c> if the packet sequence number is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.PacketValidator.UpdateSequenceNumber">
            <summary>
            Updates the sequence number.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.Serializer">
            <summary>
            Converts stethoscope send commands to bytes.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Serializer.#ctor(MMM.HealthCare.Scopes.Device.Stethoscope)">
            <summary>
            Initializes a new instance of the <see cref="T:MMM.HealthCare.Scopes.Device.Serializer"/> class.
            </summary>
            <param name="sethoscope">The sethoscope to serialize commands for.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Serializer.ToBytes(MMM.HealthCare.Scopes.Device.ISendCommand)">
            <summary>
            Converts a command to bytes.
            </summary>
            <param name="command">The command we want to convert to bytes.</param>
            <returns>The byte array representation of this command.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Serializer.ToBytes(System.Byte,System.Byte[])">
            <summary>
            Converts a command to bytes.
            </summary>
            <param name="commandByte">The command byte.</param>
            <param name="payloadBytes">The payload bytes.</param>
            <returns>The bytes.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.Serializer.UpdateSequenceNumber">
            <summary>
            Updates the sequence number.
            </summary>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
            <summary>
            Occurs when the stethoscope encounters an error.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException"/> class.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException"/> class.
            </summary>
            <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="serializationInfo"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:MMM.HealthCare.Scopes.Device.StethoscopeTrack">
            <summary>
              The stethoscope's audio track.
            </summary>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeTrack.#ctor(MMM.HealthCare.Scopes.Device.Stethoscope,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
              Constructor
            </summary>
            <param name = "stethoscope">The <code>Stethoscope</code> for this track.</param>
            <param name = "name">The name of this track.</param>
            <param name = "index">The index of this track. Value will be between 0 and 11.</param>
            <param name = "bodySoundLength">The body sound play time in millisecond.</param>
            <param name = "voiceCommentLength">The comment play time in millisecond.</param>
            <param name = "identification">The tracks identifier. This has to be set on the computer side. It is not used in the stethoscope.</param>
            <param name = "isLocked">If this track is locked or not.</param>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeTrack.Delete">
            <summary>
              Deletes the track.
            </summary>
            <remarks>
            This method will permanently delete existing audio on the track. 
            Please make sure this is what the user desires before calling this 
            method.
            </remarks>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeTrack.ToString">
            <summary>
              Returns a string that represents this object.
            </summary>
            <returns>The string representation of this object.</returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeTrack.IsTrackEmpty(MMM.HealthCare.Scopes.Device.AudioType)">
            <summary>
            Determines whether the track is empty by specified audio type.
            </summary>
            <param name="audioType">The <code>AudioType</code> to check for empty.</param>
            <returns>
              <c>true</c> if the track is empty; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeTrack.GuardAgainstTrackLock">
            <summary>
              Throws an exception if the track is locked.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the track is locked.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeTrack.GuardAgainstEmptyTrack">
            <summary>
              Throws an exception if the track is empty.
            </summary>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              Occurs when the track is empty.
            </exception>
        </member>
        <member name="M:MMM.HealthCare.Scopes.Device.StethoscopeTrack.IsTrackEmpty">
            <summary>
              Gets if this track is empty.
            </summary>
            <returns><c>true</c> if this track is empty; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeTrack.Name">
            <summary>
              Gets or Sets the track name for this track. Names are limited to 6 characters that must be between the
              ASCII " " and "_" characters. Lower case letters will be converted to uppercase letters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              When the track name is longer than 6 characters or when the characters are not between the ASCII " " and
              "_" characters
            </exception>
            <exception cref="T:System.ArgumentNullException">
              When the track name is <c>null</c>.
            </exception>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              When the stethoscope is disconnected or when the stethoscope track is locked.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeTrack.Index">
            <summary>
              Gets the track index of this track.  There are only
              12 tracks.
            </summary>
            <value>
              Values range from  0 and 11.
            </value>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">When the stethoscope is disconnected.</exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeTrack.BodySoundLength">
            <summary>
              Gets the length of the body sound recording for this track.
            </summary>
            <value>
              Values will be between 0 and 32768 milliseconds.
            </value>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">When the stethoscope is disconnected.</exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeTrack.VoiceCommentLength">
            <summary>
              Gets the length of the voice comment recording for this track.
            </summary>
            <value>
              Values will be between 0 and 10752 milliseconds.
            </value>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
            Occurs when the Stethoscope is disconnected.
            </exception>
        </member>
        <member name="P:MMM.HealthCare.Scopes.Device.StethoscopeTrack.IsLocked">
            <summary>
              Gets or sets track whether or not a track is locked.
            </summary>
            <value>
              <c>true</c> if track is locked; otherwise, <c>false</c>.
            </value>
            <exception cref="T:MMM.HealthCare.Scopes.Device.StethoscopeException">
              When the stethoscope is disconnected or when attempting to lock or unlock an empty track.
            </exception>
        </member>
    </members>
</doc>
